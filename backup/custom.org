#+AUTHOR: Einar Elén
#+EMAIL: einar.elen@gmail.com
#+OPTIONS: toc:3 html5-fancy:t org-html-preamble:nil
#+HTML_DOCTYPE_HTML5: t
#+PROPERTY: header-args :tangle yes :comments both 
#+STARTUP: noinlineimages
* Handy lisp functions and macros 

#+BEGIN_SRC emacs-lisp :tangle yes
(eval-when-compile
  (defun potential-load-paths (list)
    (let ((value))
      (dolist (elt list value)
	(when (and (not value) (file-exists-p elt))
	  (setq value (expand-file-name elt))))
      value))
  (defun elib-extend-leader (title name prefix &rest keymaps)
	(let* ((symbol-str (concat "elib-leader-" name))
	       (definer-str (concat symbol-str "-def"))
	       (symbol (intern symbol-str))
	       (definer (intern definer-str)))
	  (set symbol (concat elib-leader " " prefix))

	  (if keymaps
	      (progn
		(eval `(elib-leader-def ,prefix'(nil :wk ,title) :keymaps ',keymaps))
		(eval `(general-create-definer ,definer :prefix ,symbol :keymaps ',keymaps)))
	    (progn (eval `(general-create-definer ,definer :prefix ,symbol))
		   (eval `(elib-leader-def ,prefix'(nil :wk ,title) )))
	    )))
	    (use-package general)
	    (setq elib-leader "M-m")
      (eval `(general-unbind ,elib-leader))
      (general-create-definer elib-leader-def
	:prefix elib-leader)
)
(defmacro alist-get-equal (key alist &optional default
			       remove)
  "A call to `alist-get' with testfn set to `equal'"
  `(alist-get ,key ,alist ,default ,remove 'equal))


(defmacro alist-get-equal-simple (key alist)
  "A call to `alist-get' with default and remove set to
  nil and testfn set to `equal'

  In reality, a call to `alist-get-equal' with default and
  remove set to nil."
  `(alist-get-equal ,key ,alist nil nil))

(defmacro add-to-list-multi (lst elts &optional append compare-fn)
  "Call `add-to-list' for each element in ELTS to LST."
  `(dolist (x ,elts)
     (add-to-list ,lst x ,append ,compare-fn)))


(defun add-to-list-force (lst elt)
  "If the car of ELT is a key in LST, replace the value with the
value from ELT. Otherwise, call `add-to-list'"
  (if (assoc (car elt) lst)
      (setf
       (cdr (assoc (car elt) lst))
       (cdr elt))
    (add-to-list 'lst elt)))
#+END_SRC
* Customization groups 

Customization groups makes making changes simpler and exploring the
configurations and definitions that are made in this file. If you want
to start exploring, try calling [[elisp:(describe-function 'customize-group)][`customize-group']] and looking into the
base group [[elisp:(customize-group 'elib)][`elib']].

Currently the subgroups of [[elisp:(customize-group 'elib)][`elib']] are
- [[elisp:(customize-group 'elib-file-paths)][`elib-file-paths']]
  - Contains file paths that you can customize
- [[elisp:(customize-group 'elib-calendar)][`elib-calendar']]
  - Things related to [[elisp:(describe-package 'calfw)][`calfw']] and [[elisp:(describe-function 'org-gcal)][`org-gcal']] that provide
    calendar functionality for emacs
  - [[elisp:(customize-group 'elib-org)][`elib-org']]
    - Contains org-mode related configuration
  - [[elisp:(customize-group 'elib-helm-tex)][`elib-helm-tex']]
    - Configuration for the [[elisp:(describe-function 'elib-helm-tex-choose-program)][`elib-helm-tex-choose-program']] function
    - Subgroups for three possible pdf-viewers
      1) [[elisp:(customize-group 'elib-helm-tex-pdf-tools)][`elib-helm-tex-pdf-tools']]
      2) [[elisp:(customize-group 'elib-helm-tex-okular)][`elib-helm-tex-okular']]
      3) [[elisp:(customize-group 'elib-helm-tex-evince)][`elib-helm-tex-evince']]
#+BEGIN_SRC emacs-lisp :tangle yes
(eval-when-compile
  (defgroup elib nil
    "Overarching customization group for any custom groups
    created in `config-file-file-name'."
    :tag "*elib*")

  (defgroup elib-file-paths nil
    "Customization group for file-paths."
    :group 'elib
    :tag "elib-file-paths")
  (defgroup elib-calendar nil
    "Customization group for `calfw' and `org-gcal'."
    :tag "elib-calendar"
    :group 'elib-)
  (defgroup elib-org nil
    "Customization group for `org-mode'."
    :tag "elib-org"
    :group 'elib)

  (defgroup elib-helm-tex nil
    "Customization group for the\
    `elib-helm-tex-choose-program' function."
    :tag "elib-helm-TeX"
    :group 'elib)
  (defgroup elib-helm-tex-pdf-tools nil
    "Customization group for the PDF-tools reader\
   for the `elib-helm-tex'-group."
    :tag "elib-'helm-TeX-PDF-tools"
    :group 'elib-helm-tex)
  (defgroup elib-helm-tex-okular nil
    "Customization group for the Okular reader for\
   the `elib-helm-tex'-group."
    :tag "elib-helm-TeX-Okular"
    :group 'elib-helm-tex)
  (defgroup elib-helm-tex-evince nil
    "Customization group for the Evince reader for\
   the `elib-helm-tex'-group."
    :tag "elib-helm-TeX-Evince"
    :group 'elib-helm-tex))
#+END_SRC

* Personal Information

Personal name and email

  #+BEGIN_SRC emacs-lisp :tangle yes 
    (eval-when-compile
    (setq user-full-name "Einar Elén"
	  user-mail-address "einar.elen@gmail.com")
    (defcustom user-mail-address-list `(,user-mail-address,
					"jol-ordf@luna.lu.se",
					"nat13eel@student.lu.se"
					,"einar.alfred.elen@cern.ch")
      "A list of the `user-mail-address' and any additional
      email addresses of the user."
      :group 'elib
      :type '(repeat string)))
#+END_SRC 
* User variables 
* Location of executables Remove these

Since we want to be able to use the same configuration
regardless of where programs might be stored on our
computer, we define some variables for storing the location
of these programs. They are set automatically using the
handy [[elisp:(describe-function 'executable-find)][`executable-find']] function.

#+BEGIN_SRC emacs-lisp :tangle yes
(eval-when-compile
  (setq
   with-editor-emacsclient-executable (executable-find
				       "emacsclient")
   magit-git-executable (executable-find "git")
   cide--rdm-executable (executable-find "rdm")
   irony-cmake-executable (executable-find "cmake")
   company-cmake-executable irony-cmake-executable
   cmake-mode-cmake-executable company-cmake-executable
   company-clang-executable (executable-find "clang")
   flycheck-c/c++-clang-executable company-clang-executable

   flycheck-c/c++-gcc-executable (executable-find "gcc")
   clang-format-executable (executable-find "clang-format")
   company-gtags-executable (or (executable-find "global")
				(executable-find "gtags"))))
#+END_SRC
* File paths 

#+BEGIN_SRC emacs-lisp :tangle yes

  (eval-when-compile
    (defvar elib-external-lisp-dir (concat user-emacs-config-directory "external/lisp/"))
      (defvar elib-external-lisp-spacemacs-dir (concat user-emacs-config-directory "external/lisp/spacemacs/"))
      (defvar elib-external-lisp-scimax-dir (concat user-emacs-config-directory "external/lisp/scimax/"))
      (defvar elib-cache-dir (concat user-emacs-directory ".cache/"))
    (defvar elib-mu4e-load-path
      (potential-load-paths
       '("~/.local/share/emacs/site-lisp/mu4e"
	 "/usr/local/share/emacs/site-lisp/mu4e"
	 "/usr/local/share/emacs/site-lisp/mu/mu4e"
	 "~/.emacs.d/mu4e")))
    (defcustom elib-snippets-base-directory
      (expand-file-name
       (concat user-emacs-config-directory
	       "snippets/"))
      "Location of custom yasnippet files."
      :type 'string
      :group 'elib-file-paths)
      (defcustom elib-external-lisp-dir 
      (expand-file-name
       (concat user-emacs-config-directory
	       "external/lisp/"))
      "Location of lisp from other sources."
      :type 'string
      :group 'elib-file-paths )
    (defcustom elib-snippets-directory
      (expand-file-name
       (concat elib-snippets-base-directory
	       "elib/"))
      "Location of custom yasnippet files."
      :type 'string
      :group 'elib-file-paths)
    (defcustom tuhdo-snippets-directory
      (expand-file-name
       (concat elib-snippets-base-directory
	       "/tuhdosnippets/"))
      "Location of extra yasnippet files from Tuhdo."
      :type 'string
      :group 'elib-file-paths)


    (defcustom elib-config-file-file-name
      (expand-file-name
       (concat
	user-emacs-config-directory
	"configuration.org"))
      "The filename of the user configuration file."
      :type 'string
      :group 'elib-file-paths
      :group 'elib-org)


    (defcustom elib-drive-dir
      (expand-file-name "../Nextcloud"
			user-emacs-config-directory)
      "Filename of the user's personal
	drive (e.g. nextcloud/google drive/dropbox)"
      :type 'string
      :group 'elib-file-paths
      :group 'elib-org)


    (defcustom elib-bibliography-dir
      (expand-file-name "bibliography"
			elib-drive-dir)
      "Filename of the user's personal bibliography folder "
      :type 'string
      :group 'elib-file-paths
      :group 'elib-org)
    (defcustom elib-default-bibtex-file
      (expand-file-name "general.bib"
			elib-bibliography-dir)
      "Filename of the user's personal bibliography bibtex-file"
      :type 'string
      :group 'elib-file-paths
      :group 'elib-org)
    (defcustom elib-default-bibtex-notes-file
      (expand-file-name "notes"
			elib-bibliography-dir)
      "Filename of the user's personal bibliography notes-file"
      :type 'string
      :group 'elib-file-paths
      :group 'elib-org)
    (defcustom elib-default-bibtex-pdf-dir
      (expand-file-name "bibtex-pdfs/"
			elib-bibliography-dir)
      "Filename of the user's personal bibliography pdf folder"
      :type 'string
      :group 'elib-file-paths
      :group 'elib-org)

    (defcustom elib-user-org-directory
      (expand-file-name "org/" elib-drive-dir)
      "Directory where most org files are stored."
      :type 'string
      :group 'elib-file-paths
      :group 'elib-org)


    (defcustom elib-org-calendar-directory
      (concat
       elib-user-org-directory "cal/")
      "The directory where calendar files for `org-gcal' are
	stored."
      :group 'elib-calendar
      :group 'elib-file-paths
      :group 'elib-org
      :type 'string)



    (defcustom elib-user-org-calendar-secrets-file
      (concat elib-org-calendar-directory "calendar.org")
      ""
      :group 'elib-org
      :group 'elib-file-paths
      :group 'elib-calendar
      )
    (defcustom elib-user-org-caldav-secrets-file
      (concat elib-org-calendar-directory "caldav.org")
      ""
      :group 'elib-org
      :group 'elib-file-paths
      :group 'elib-calendar
      )



    (defcustom elib-org-async-init-file (concat user-emacs-config-directory
						"orginit.el")
      ""
      :group 'elib-org
      :group 'elib-file-paths
      )


    )

#+END_SRC 
