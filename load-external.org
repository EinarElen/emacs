#+AUTHOR: Einar El√©n
#+EMAIL: einar.elen@gmail.com
#+OPTIONS: toc:3 html5-fancy:t org-html-preamble:nil
#+HTML_DOCTYPE_HTML5: t
#+PROPERTY: header-args :tangle yes :comments both 
#+STARTUP: noinlineimages

* Help functions
#+BEGIN_SRC emacs-lisp
(defvar elib-external-lisp-help-fns (concat elib-external-lisp-dir "help-fns-plus"))
(use-package help-fns+
    :load-path elib-external-lisp-help-fns)
#+END_SRC

#+RESULTS:

* Dependencies 
#+BEGIN_SRC emacs-lisp
;; Required before
(use-package undo-tree)
(eval-after-load 'undo-tree
  '(remove-hook 'menu-bar-update-hook 'undo-tree-update-menu-bar))
(use-package hydra)
(use-package elpy)
(use-package lispy)
(use-package which-key)
(use-package org
  :ensure org-plus-contrib)
(use-package ob
  :ensure org-plus-contrib)
(use-package org-mouse
  :ensure org-plus-contrib)
(use-package s)
(use-package rx)
(use-package easymenu
  :ensure nil)
(use-package dash)
(use-package avy)
(use-package ox
  :ensure org-plus-contrib)
(use-package ox-publish
  :ensure org-plus-contrib)
(use-package ov :ensure t)
(use-package url)
(use-package xml)
(use-package font-lock :ensure nil)
(use-package cl :ensure nil)
(use-package color :ensure nil)
(setq clipmon--autoinsert nil)
#+END_SRC

#+RESULTS:

* Scimax 

[[/home/einarelen/.emacs.d/external/lisp/scimax/.][scimax-dir]]
#+BEGIN_SRC emacs-lisp :tangle no
  (setq scimax-user-dir user-emacs-directory)
  (setq scimax-dir user-emacs-directory)
  ;; No variables to clean
  (ignore-errors (use-package scimax-utils 
    :load-path elib-external-lisp-scimax-dir))
  ;; No variables to clean 
  (use-package scimax-mode
    :load-path elib-external-lisp-scimax-dir
    :config
    (scimax-mode)) 
 (use-package scimax-latex
:load-path elib-external-lisp-scimax-dir 
)
(use-package scimax-org-latex
:load-path elib-external-lisp-scimax-dir
  :config
  (scimax-toggle-org-latex-fragment-tooltip)
  (scimax-toggle-latex-fragment-justification)
  (scimax-toggle-latex-equation-numbering)
  (scimax-toggle-inject-latex))

  (use-package scimax-ob
    :disabled t
    :load-path
    elib-external-lisp-scimax-dir)
  ;; Important variable: scimax-src-block-keymaps 
  (use-package scimax-email
    :load-path
    elib-external-lisp-scimax-dir)
  (setq elib-ox-manuscript-load-path
	(concat elib-external-lisp-scimax-dir "ox-manuscript/"))
  (use-package ox-manuscript
    :load-path elib-ox-manuscript-load-path)
  (use-package words
    :load-path elib-external-lisp-scimax-dir)
  (use-package emacs-keybinding-command-tooltip-mode
    :load-path elib-external-lisp-scimax-dir)
  (unless (file-exists-p (concat elib-external-lisp-scimax-dir "scimax-editmarks.el"))
    (org-babel-tangle-file (concat elib-external-lisp-scimax-dir "scimax-editmarks.org")))   
  (use-package scimax-editmarks
    :load-path elib-external-lisp-scimax-dir
    :hook (org-mode . sem-mode))

(setq elib-ox-ipynb-dir (concat elib-external-lisp-scimax-dir "ox-ipynb"))
(use-package ox-ipynb
:load-path elib-ox-ipynb-dir
) 

#+END_SRC


* Spacemacs 

** Dependencies

#+BEGIN_SRC emacs-lisp :tangle no
(use-package helm-org)
(use-package bind-map :ensure t)
(defun load-in-spacemacs (dir &rest files)
  (dolist (file files) 
    (load-file (concat elib-external-lisp-spacemacs-dir dir "/" file ".el"))
    )
  )
#+END_SRC

** Init

#+BEGIN_SRC emacs-lisp :tangle no
(setq dotspacemacs-enable-server t
 dotspacemacs-persistent-server t
dotspacemacs-smartparens-strict-mode t
dotspacemacs-line-numbers 'relative 
)

(defmacro elib-do-with-configuration-layer (&rest body)
  `(cl-letf (((symbol-function 'configuration-layer/package-used-p) (lambda (&rest args) t)))
    ,@body
    ) 
   )

(setq dotspacemacs-editing-style 'hybrid)
(setq spacemacs-start-directory elib-external-lisp-spacemacs-dir)
(setq spacemacs-cache-directory elib-cache-dir)
(load-in-spacemacs "core" "core-load-paths" "core-versions" "core-dumper" "core-keybindings" "core-spacemacs" "core-release-management" "core-dotspacemacs" "core-funcs" "core-jump" "core-toggle" "core-transient-state"  "core-use-package-ext" "core-keybindings" "core-fonts-support" "core-configuration-layer" "core-display-init" "core-hooks" ) 

#+END_SRC

** Modeline 
#+BEGIN_SRC emacs-lisp :tangle no
(load-in-spacemacs "layers/+spacemacs/spacemacs-modeline/" "funcs" "config" "packages")
(setq dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5))
(spacemacs-modeline/init-doom-modeline)
(use-package spaceline)
(use-package spaceline-config :ensure nil)
(defun spacemacs-modeline/init-spaceline ()
  (use-package spaceline-config
    :ensure nil
    :if (memq (spacemacs/get-mode-line-theme-name)
              '(spacemacs all-the-icons custom))
    :init
    (progn
      (add-hook 'emacs-startup-hook
                (lambda ()
                  (spacemacs|add-transient-hook window-configuration-change-hook
                    (lambda ()
                      (setq spaceline-byte-compile t)
                      ;; this must also be set in this hook because
                      ;; (spacemacs/compute-mode-line-height) returns incorrect
                      ;; results if it is called before the display system is
                      ;; initialized. see issue for details:
                      ;; https://github.com/syl20bnr/spacemacs/issues/10181
                      (setq powerline-height
                            (spacemacs/compute-mode-line-height))
                      (spaceline-compile))
                    lazy-load-spaceline)))
      (add-hook 'spacemacs-post-theme-change-hook
                'spacemacs/customize-powerline-faces)
      (add-hook 'spacemacs-post-theme-change-hook 'powerline-reset)
      (spacemacs|add-toggle mode-line-responsive
        :status spaceline-responsive
        :on (progn (setq spaceline-responsive t)
                   (powerline-reset))
        :off (progn (setq spaceline-responsive nil)
                    ;; seems necessary to recompile when turning off
                    (spaceline-compile))
        :documentation "Make the mode-line responsive."
        :evil-leader "tmr")
      ;; Segment toggles
      (dolist (spec '((minor-modes "tmm")
                      (major-mode "tmM")
                      (version-control "tmv")
                      (new-version "tmV")
                      (point-position "tmp")
                      (org-clock "tmc")))
        (let* ((segment (car spec))
               (status-var (intern (format "spaceline-%S-p" segment))))
          (eval `(spacemacs|add-toggle ,(intern (format "mode-line-%S" segment))
                   :status ,status-var
                   :on (setq ,status-var t)
                   :off (setq ,status-var nil)
                   :documentation ,(format "Show %s in the mode-line."
                                           (replace-regexp-in-string
                                            "-" " " (format "%S" segment)))
                   :evil-leader ,(cadr spec)))))
      (setq powerline-default-separator
            (cond
             ((spacemacs-is-dumping-p) 'utf-8)
             ((memq (spacemacs/get-mode-line-theme-name)
                    '(spacemacs custom))
              (spacemacs/mode-line-separator))
             (t 'wave))
            powerline-image-apple-rgb (eq window-system 'ns)
            powerline-scale (or (spacemacs/mode-line-separator-scale) 1.5)
            spaceline-byte-compile nil))
    :config
    (progn
      (spacemacs/customize-powerline-faces)
      (setq spaceline-org-clock-p nil
            spaceline-highlight-face-func 'spacemacs//evil-state-face)
      ;; unicode
      (let ((unicodep (dotspacemacs|symbol-value
                       dotspacemacs-mode-line-unicode-symbols)))
        (setq spaceline-window-numbers-unicode unicodep
              spaceline-workspace-numbers-unicode unicodep))
      (add-hook 'spaceline-pre-hook 'spacemacs//prepare-diminish)
      ;; New spacemacs version segment
      (defpowerline spacemacs-powerline-new-version
        (propertize
         spacemacs-version-check-lighter
         'mouse-face 'mode-line-highlight
         'help-echo (format "New version %s | Click with mouse-1 to update"
                            spacemacs-new-version)
         'local-map (let ((map (make-sparse-keymap)))
                      (define-key map
                        [mode-line down-mouse-1]
                        (lambda (event)
                          (interactive "@e")
                          (if (yes-or-no-p
                               (format
                                (concat "Do you want to update to the newest "
                                        "version %s ?")
                                spacemacs-new-version))
                              (progn
                                (spacemacs/switch-to-version
                                 spacemacs-new-version))
                            (message "Update aborted."))))
                      map)))
      (spaceline-define-segment
          new-version
        (when spacemacs-new-version
          (spacemacs-powerline-new-version
           (spacemacs/get-new-version-lighter-face
            spacemacs-version spacemacs-new-version))))
      (let ((theme (intern (format "spaceline-%S-theme"
                                   (spacemacs/get-mode-line-theme-name)))))
        (apply theme spacemacs-spaceline-additional-segments))
      ;; Additional spacelines
      (when (package-installed-p 'helm)
        (spaceline-helm-mode t))
      (when (configuration-layer/package-used-p 'info+)
        (spaceline-info-mode t))
      ;; Enable spaceline for buffers created before the configuration of
      ;; spaceline
      (spacemacs//restore-buffers-powerline))))

(let ((use-package-always-ensure nil))
  (print use-package-always-ensure)
  (spacemacs-modeline/init-spaceline))
(spacemacs-modeline/init-fancy-battery)
(spacemacs-modeline/init-symon)

#+END_SRC

** Defaults 
   #+BEGIN_SRC emacs-lisp :tangle no
(load-in-spacemacs "layers/+spacemacs/spacemacs-defaults" "funcs" "config"  "packages" "keybindings" )
   #+END_SRC

** Bootstrap  
   #+BEGIN_SRC emacs-lisp :tangle no
(load-in-spacemacs "layers/+distributions/spacemacs-bootstrap" "funcs" "config" "packages" "local/evil-evilified-state/evil-evilified-state" "local/hybrid-mode/hybrid-mode")
 (spacemacs-bootstrap/init-evil)
(spacemacs-bootstrap/init-which-key) 
(defun spacemacs-bootstrap/init-evil-evilified-state ()
  (use-package evil-evilified-state :ensure nil)

  (define-key evil-evilified-state-map (kbd dotspacemacs-leader-key)
    spacemacs-default-map))
(spacemacs-bootstrap/init-evil-evilified-state)

(spacemacs-bootstrap/init-bind-map)
(defun spacemacs-bootstrap/init-hybrid-mode ()
  (spacemacs|unless-dumping-and-eval-after-loaded-dump hybrid-mode
    (use-package hybrid-mode
      :ensure nil
      :config
      (progn
        (when (eq 'hybrid dotspacemacs-editing-style) (hybrid-mode))
        (spacemacs|add-toggle hybrid-mode
          :status hybrid-mode
          :on (progn (when (bound-and-true-p holy-mode)
                       (holy-mode -1))
                     (hybrid-mode))
          :off (hybrid-mode -1)
          :documentation "Globally toggle hybrid mode."
          :evil-leader "tEh")
        (spacemacs|diminish hybrid-mode " ‚í∫h" " Eh")))))
(spacemacs-bootstrap/init-hybrid-mode)
 
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp :tangle no
(load-in-spacemacs "layers/+spacemacs/spacemacs-misc" "packages") 
(spacemacs-misc/init-dumb-jump)
#+END_SRC

** Fonts 
#+BEGIN_SRC emacs-lisp :tangle no
(load-in-spacemacs "layers/+fonts/unicode-fonts" "packages" "config")
(unicode-fonts/init-persistent-soft)
(unicode-fonts/init-unicode-fonts)
(spacemacs/set-default-font dotspacemacs-default-font)
#+END_SRC

** Navigation
#+BEGIN_SRC emacs-lisp :tangle no
(load-in-spacemacs "layers/+spacemacs/spacemacs-navigation" "funcs" "packages" "local/info+/info+")
(spacemacs-navigation/init-ace-link)
(spacemacs-navigation/init-ace-window)
(spacemacs-navigation/init-auto-highlight-symbol) 
(spacemacs-navigation/init-centered-cursor-mode)
(defun spacemacs-navigation/init-info+ ()
  (use-package info+
     :ensure nil
    :defer t
    :init
    (progn
      (setq Info-fontify-angle-bracketed-flag nil)
      (add-hook 'Info-mode-hook (lambda () (require 'info+))))))
(spacemacs-navigation/init-info+) 
#+END_SRC

** Projects 
#+BEGIN_SRC emacs-lisp :tangle no
(load-in-spacemacs "layers/+spacemacs/spacemacs-project" "funcs" "packages")
(spacemacs-project/init-projectile)
#+END_SRC

** Spacemacs visual 
#+BEGIN_SRC emacs-lisp :tangle no

(load-in-spacemacs "layers/+spacemacs/spacemacs-visual" "funcs" "packages" "local/zoom-frm/frame-fns" "local/zoom-frm/frame-cmds"  "local/zoom-frm/zoom-frm")
(spacemacs-visual/init-ansi-colors)
(spacemacs-visual/init-desktop)
(spacemacs-visual/init-fill-column-indicator)
(spacemacs-visual/init-popwin)
  (use-package zoom-frm
    :commands (zoom-frm-unzoom
               zoom-frm-out
               zoom-frm-in)
    :ensure nil
    :init
    (progn
      (spacemacs|define-transient-state zoom-frm
        :title "Zoom Frame Transient State"
        :doc "
[_+_/_=_/_k_] zoom frame in   [_m_] max frame
[_-_/___/_j_] zoom frame out  [_f_] fullscreen
[_0_]^^^^     reset zoom      [_q_] quit"
        :bindings
        ("+" spacemacs/zoom-frm-in)
        ("=" spacemacs/zoom-frm-in)
        ("k" spacemacs/zoom-frm-in)
        ("-" spacemacs/zoom-frm-out)
        ("_" spacemacs/zoom-frm-out)
        ("j" spacemacs/zoom-frm-out)
        ("0" spacemacs/zoom-frm-unzoom)
        ("f" spacemacs/toggle-frame-fullscreen-non-native)
        ("m" spacemacs/toggle-maximize-frame)
        ("q" nil :exit t))
      (spacemacs/set-leader-keys "zf" 'spacemacs/zoom-frm-transient-state/body)

      ;; Font size, either with ctrl + mouse wheel
      (global-set-key (kbd "<C-wheel-up>") 'spacemacs/zoom-frm-in)
      (global-set-key (kbd "<C-wheel-down>") 'spacemacs/zoom-frm-out)))
#+END_SRC

** Editing + Editing Visual 

#+BEGIN_SRC emacs-lisp :tangle no

(load-in-spacemacs "layers/+spacemacs/spacemacs-editing" "funcs"  "packages" )
(spacemacs-editing/init-aggressive-indent)

(spacemacs-editing/init-move-text)
(spacemacs-editing/init-avy)
(spacemacs-editing/init-clean-aindent-mode)
(spacemacs-editing/init-expand-region)
(spacemacs-editing/init-hungry-delete)
(spacemacs-editing/init-link-hint)
(spacemacs-editing/init-ws-butler) 

(load-in-spacemacs "layers/+spacemacs/spacemacs-editing-visual"  "packages")
#+END_SRC

** Completion 
#+BEGIN_SRC emacs-lisp :tangle no
(load-in-spacemacs "layers/+spacemacs/spacemacs-completion" "funcs" "config" "packages")
(setq helm-no-header nil) 
(spacemacs-completion/init-default-helm-config)

(load-in-spacemacs "layers/+completion/helm" "config" "funcs" "packages" "local/helm-spacemacs-help/helm-spacemacs-help" "local/helm-spacemacs-help/helm-spacemacs-faq")  
(load-in-spacemacs "layers/+completion/auto-completion" "funcs" "packages" "config")  
(helm/init-helm) 
(helm/init-helm-projectile) 
(helm/init-helm-ag) 
(helm/init-helm-descbinds)
(helm/init-helm-swoop)
(helm/init-ace-jump-helm-line)
(auto-completion/init-company)
(auto-completion/init-company-quickhelp)
(auto-completion/init-helm-company)
(auto-completion/init-hippie-exp)
(auto-completion/init-yasnippet)
(auto-completion/post-init-smartparens) 
#+END_SRC

** Current 
#+BEGIN_SRC emacs-lisp :tangle yes :tangle no

 #+END_SRC

 #+RESULTS:
 : t








** Ipython 

#+BEGIN_SRC emacs-lisp :tangle no
;(load-in-spacemacs "layers/+lang/ipython-notebook" "packages")
;(ipython-notebook/init-ein)

;(ipython-notebook/post-init-company)

(load-in-spacemacs "layers/+lang/python" "config" "funcs" "packages")
(python/pre-init-pyvenv)
(python/init-pyvenv)
(python/pre-init-pyenv-mode)
(python/init-pyenv-mode)
(python/init-python)
#+END_SRC

** Applications 
#+BEGIN_SRC emacs-lisp :tangle no
(load-in-spacemacs "layers/+tools/shell" "funcs" "config" "packages")
(setq shell-enable-smart-eshell t)
(setq shell-default-shell 'eshell)
(spacemacs-navigation/init-paradox)
(shell/init-comint)
(shell/pre-init-company)
(shell/init-esh-help)
(shell/init-eshell)
(shell/init-eshell-prompt-extras)
(shell/init-eshell-z)
(shell/pre-init-magit)
(shell/init-multi-term)
(shell/init-shell-pop)
#+END_SRC

 
** Emacs lisp
#+BEGIN_SRC emacs-lisp :tangle no
(load-in-spacemacs "layers/+emacs/helpful" "config" "packages")
(helpful/init-helpful)
(load-file (concat elib-external-lisp-dir "helpful-in-helm.el"))
(helpful-in-helm-activate) 
#+END_SRC

** Vim and Evil 
#+BEGIN_SRC emacs-lisp :tangle no
(setq vim-style-visual-feedback t)
(load-in-spacemacs "layers/+vim/" "evil-commentary/packages" "evil-snipe/config" "evil-snipe/packages")

(load-in-spacemacs "layers/+spacemacs/spacemacs-evil" "config" "funcs"  "packages" "local/evil-unimpaired/evil-unimpaired")

(spacemacs-evil/init-evil-cleverparens)
(spacemacs-evil/init-evil-indent-plus)
(spacemacs-evil/init-evil-iedit-state)
(spacemacs-evil/init-evil-lion)
(spacemacs-evil/init-evil-lisp-state )
(require 'evil-lisp-state)
(spacemacs-evil/init-evil-goggles)
(spacemacs-evil/init-evil-exchange)
(spacemacs-evil/init-evil-anzu)
(spacemacs-evil/init-evil-args)
(spacemacs-evil/init-evil-textobj-line) 
(use-package evil-unimpaired :ensure nil)
(spacemacs-evil/init-evil-visual-mark-mode)
(spacemacs-evil/init-evil-visualstar)
;; (spacemacs/toggle-evil-cleverparens-on)

(use-package evil-cleverparens-text-objects :ensure evil-cleverparens)

(evil-snipe/init-evil-snipe)
(evil-snipe/post-init-magit )
(evil-snipe-override-mode)
(evil-commentary/init-evil-commentary)

#+END_SRC

** Multiple Cursors 
   #+BEGIN_SRC emacs-lisp :tangle no
(load-in-spacemacs "layers/+misc/multiple-cursors" "config" "funcs" "packages")
(multiple-cursors/init-evil-mc)
(multiple-cursors/init-multiple-cursors)
   #+END_SRC
   
** Hooks
 #+BEGIN_SRC emacs-lisp  :tangle no
(run-hooks 'spacemacs-post-user-config-hook)
(setq spacemacs-post-user-config-hook-run t)
#+END_SRC
