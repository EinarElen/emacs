#+TITLE: Emacs Configuration
#+AUTHOR: Einar El√©n
#+EMAIL: einar.elen@gmail.com
#+OPTIONS: toc:3 html5-fancy org-html-preamble:nil
#+HTML_DOCTYPE_HTML5: t
* Emacs Setup
** Package Installation
*** Initialization
 #+BEGIN_SRC emacs-lisp
         (require 'package)
   (add-to-list 'package-archives
                '("melpa" . "http://melpa.org/packages/") t)
         (add-to-list 'package-archives
                      '("org" . "http://orgmode.org/elpa/") t)
            (package-initialize)

         (defun install-packages ()
           "Install all required packages."
           (interactive)
           (unless package-archive-contents
             (package-refresh-contents))
           (dolist (package demo-packages)
             (unless (package-installed-p package)
               (package-install package))))

 #+END_SRC
*** Package List
 #+BEGIN_SRC emacs-lisp
 (defconst demo-packages
   '(magit
     org-beautify-theme
     calfw
     pdf-tools
     web-mode
     htmlize
     sr-speedbar
     ox-twbs
     multi-term
     nyan-mode
     ycmd
     exec-path-from-shell
     powerline
     company-ycmd
     flycheck-ycmd
     nlinum
     flycheck-irony
     solarized-theme
     company-c-headers
     flycheck
     flycheck-pos-tip
     avy
     avy-zap
     anzu
     company
     org-gcal
     duplicate-thing
     ggtags
     helm
     helm-descbinds
     helm-gtags
     helm-dash
     clang-format
     helm-projectile
     helm-swoop
     function-args
     clean-aindent-mode
     comment-dwim-2
     dtrt-indent
     ws-butler
     color-identifiers-mode
     iedit
     smartparens
     projectile
     irony
     company-irony
     company-irony-c-headers
     volatile-highlights
     undo-tree
     diminish
     auctex
     company-auctex
     latex-preview-pane
     helm-c-yasnippet
     monokai-theme
     zygospore
     org-plus-contrib
     helm-swoop
     zoom-frm
     gnuplot
     hyperbole
     ))
 (install-packages)
 #+END_SRC
** Improve Basic Emacs Experience
 #+BEGIN_SRC emacs-lisp
   (defun configuration-file() "Visit the main configuration file"
          (interactive)
          (find-file "~/.emacs.d/configuration.org"))
    (global-set-key (kbd "<f8>") 'configuration-file)          
    (set 'frame-title-format "Emacs")
    (set 'visible-bell t)
    (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
(when (or (eq system-type 'gnu/linux) (eq system-type 'cygwin))
    (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
(require 'pdf-tools)
  (pdf-tools-install) ; nice PDF viewer (needs separate installation)
  (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
  (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view"))))
    (menu-bar-mode -1)
    (when (display-graphic-p)
      (tool-bar-mode -1)
      (scroll-bar-mode -1))
    (set-default 'cursor-type 'hbar)
    (set 'column-number-mode t)
    (set 'line-number-mode t)
    (global-unset-key (kbd "C-x C-z"))
    (global-unset-key (kbd "C-z"))
    (setq gc-cons-threshold 100000000)
    (setq inhibit-startup-message t)

    (defalias 'yes-or-no-p 'y-or-n-p)
    (set-face-attribute 'default nil :height 140)
    (setq
     backup-by-copying t
     backup-directory-alist
     '(("." . "~/.saves"))
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 4
     version-control t)

    (setq tramp-default-method "ssh")

 #+END_SRC
** Looks/Themes
*** Basic Configuration
 #+BEGIN_SRC emacs-lisp
   (require 'powerline)
   (powerline-vim-theme)
   (require 'nlinum)
(require 'linum)

(global-nlinum-mode t)

(defcustom linum-disabled-modes-list '(eshell-mode wl-summary-mode compilation-mode org-mode text-mode dired-mode doc-view-mode)
  "* List of modes disabled when global linum mode is on"
  :type '(repeat (sexp :tag "Major mode"))
  :tag " Major modes where linum is disabled: "
  :group 'linum
  )
(defcustom linum-disable-starred-buffers 't
  "* Disable buffers that have stars in them like *Gnu Emacs*"
  :type 'boolean
  :group 'linum)

(defun linum-on ()
  "* When linum is running globally, disable line number in modes defined in `linum-disabled-modes-list'. Changed by linum-off. Also turns off numbering in starred modes like *scratch*"

  (unless (or (minibufferp) (member major-mode linum-disabled-modes-list)
              (and linum-disable-starred-buffers (string-match "*" (buffer-name)))
              )
(nlinum-mode 1)))

   (windmove-default-keybindings)
   (setq  gdb-many-windows t
    gdb-show-main t
    )
   (defun color-diminish-hook () "Diminish ci-mode" (interactive)
          (require 'diminish)
          (global-color-identifiers-mode t)
          (diminish 'color-identifiers-mode)
          )
   (global-set-key (kbd "C-x 1") 'zygospore-toggle-delete-other-windows)
   (require 'color-identifiers-mode)
   (add-hook 'after-init-hook 'color-diminish-hook)
   (require 'hyperbole)

 #+END_SRC
*** Random Themes
 #+BEGIN_SRC emacs-lisp
 (defvar themes-to-use (list "monokai" "solarized-dark" "solarized-light") "List of themes that will be loaded by choose-random-theme")
 (defvar current-theme-used (list "monokai") "Current theme chosen by choose-random theme")
 (defun choose-random-theme ()
   "Choose random theme from themes-to-use!"
   (interactive)
   (setq current-theme-number (random (length themes-to-use)))
   (when (= current-theme-number 0)
     (setq current-theme-used (list "monokai"))
     (load-theme 'monokai t))
   (when (= current-theme-number 1)
     (setq current-theme-used (list "solarized-dark"))
     (load-theme 'solarized-dark t))
   (when (= current-theme-number 2)
     (setq current-theme-used (list "solarized-light"))
     (load-theme 'solarized-light t)))
 (choose-random-theme)
 #+END_SRC
** Text Editing
*** Basic
 #+BEGIN_SRC emacs-lisp
   (setq global-mark-ring-max 5000
         mark-ring-max 5000
         mode-require-final-newline t
         tab-width 4
         )
   (add-hook 'sh-mode-hook (lambda ()
                             (setq tab-width 4)))
   (set-terminal-coding-system 'utf-8)
   (set-keyboard-coding-system 'utf-8)
   (set-language-environment "UTF-8")
   (prefer-coding-system 'utf-8)
   (setq-default indent-tabs-mode nil)
   (delete-selection-mode)
   (setq kill-ring-max 5000 kill-whole-line t)
   (add-hook 'diff-mode-hook (lambda () (setq-local whitespace-style
                                                    '(face
                                                      tabs
                                                      tab-mark
                                                      spaces
                                                      space-mark
                                                      trailing
                                                      indentation::space
                                                      indentation::tab
                                                      newline
                                                      newline-mark))
                               (whitespace-mode 1)))
   (add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))
   (setq-default indent-tabs-mode nil)
   (setq-default tab-width 4)
   (add-hook 'text-mode-hook 'auto-fill-mode)

 #+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "RET") 'newline-and-indent)
   (global-set-key (kbd "RET") 'newline-and-indent)
   (global-set-key (kbd "C-c w") 'whitespace-mode)
   (global-set-key (kbd "<f5>") (lambda ()
                                  (interactive)
                                  (setq-local compilation-read-command nil)
                                  (call-interactively 'compile)))
#+END_SRC
*** Packages
**** Volatile Highlights
 #+BEGIN_SRC emacs-lisp
 (require 'volatile-highlights)
 (volatile-highlights-mode t)
 #+END_SRC
**** Clean Aindent Mode
 #+BEGIN_SRC emacs-lisp
 (require 'clean-aindent-mode)
 (add-hook 'prog-mode-hook 'clean-aindent-mode)
 #+END_SRC
**** Dtrt-Indent
 #+BEGIN_SRC emacs-lisp
 (require 'dtrt-indent)
 (dtrt-indent-mode 1)
 (setq dtrt-indent-verbosity 0)
 #+END_SRC
**** Whitespace Butler
 #+BEGIN_SRC emacs-lisp
 (require 'ws-butler)
 (add-hook 'c-mode-common-hook 'ws-butler-mode)
 (add-hook 'text-mode 'ws-butler-mode)
 (add-hook 'fundamental-mode 'ws-butler-mode)
 #+END_SRC
**** Undo Tree
 #+BEGIN_SRC emacs-lisp
 (require 'undo-tree)
 (global-undo-tree-mode)
 #+END_SRC
**** Smartparens
 #+BEGIN_SRC emacs-lisp
     (require 'smartparens-config)
     (setq sp-base-key-bindings 'paredit)
     (setq sp-autoskip-closing-pair 'always)
     (setq sp-hybrid-kill-entire-symbol nil)
     (sp-use-paredit-bindings)
     (show-smartparens-global-mode +1)
   (smartparens-global-mode 1)
   (define-key smartparens-mode-map (kbd "M-<down>") nil)
   (define-key smartparens-mode-map (kbd "M-<up>") nil)
 #+END_SRC
**** Comment-dwim-2
 #+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "M-;") 'comment-dwim-2)
 #+END_SRC
**** Anzu
 #+BEGIN_SRC emacs-lisp
 (require 'anzu)
 (global-anzu-mode)
 (global-set-key (kbd "M-%") 'anzu-query-replace)
 (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)
 #+END_SRC
**** Iedit
 #+BEGIN_SRC emacs-lisp
 (setq iedit-toggle-key-default nil)
 (require 'iedit)
 (global-set-key (kbd "C-;") 'iedit-mode)
 #+END_SRC
**** Duplicate Thing
 #+BEGIN_SRC emacs-lisp
 (require 'duplicate-thing)
 (global-set-key (kbd "M-c") 'duplicate-thing)
 #+END_SRC
**** Customized Functions (Mainly From Prelude)
 #+BEGIN_SRC emacs-lisp
 (defun prelude-move-beginning-of-line (arg)
   "Move point back to indentation of beginning of line.
 Move point to the first non-whitespace character on this line.
 If point is already there, move to the beginning of the line.
 Effectively toggle between the first non-whitespace character and
 the beginning of the line.
 If ARG is not nil or 1, move forward ARG - 1 lines first. If
 point reaches the beginning or end of the buffer, stop there."
   (interactive "^p")
   (setq arg (or arg 1))
   ;; Move lines first
   (when (/= arg 1)
     (let ((line-move-visual nil))
       (forward-line (1- arg))))
   (let ((orig-point (point)))
     (back-to-indentation)
     (when (= orig-point (point))
       (move-beginning-of-line 1))))

 (global-set-key (kbd "C-a") 'prelude-move-beginning-of-line)
 (defadvice kill-ring-save (before slick-copy activate compile)
   "When called interactively with no active region, copy a single
 line instead."
   (interactive
    (if mark-active (list (region-beginning) (region-end))
      (message "Copied line")
      (list (line-beginning-position)
            (line-beginning-position 2)))))
 (defadvice kill-region (before slick-cut activate compile)
   "When called interactively with no active region, kill a single
   line instead."
   (interactive
    (if mark-active (list (region-beginning) (region-end))
      (list (line-beginning-position)
            (line-beginning-position 2)))))
 ;; kill a line, including whitespace characters until next non-whiepsace character
 ;; of next line
 (defadvice kill-line (before check-position activate)
   (if (member major-mode
               '(emacs-lisp-mode scheme-mode lisp-mode
                                 c-mode c++-mode objc-mode
                                 latex-mode plain-tex-mode))
       (if (and (eolp) (not (bolp)))
           (progn (forward-char 1)
                  (just-one-space 0)
                  (backward-char 1)))))
 ;; taken from prelude-editor.el
 ;; automatically indenting yanked text if in programming-modes
 (defvar yank-indent-modes
   '(LaTeX-mode TeX-mode)
   "Modes in which to indent regions that are yanked (or yank-popped).
 Only modes that don't derive from `prog-mode' should be listed here.")

 (defvar yank-indent-blacklisted-modes
   '(python-mode slim-mode haml-mode)
   "Modes for which auto-indenting is suppressed.")

 (defvar yank-advised-indent-threshold 1000
   "Threshold (# chars) over which indentation does not automatically occur.")

 (defun yank-advised-indent-function (beg end)
   "Do indentation, as long as the region isn't too large."
   (if (<= (- end beg) yank-advised-indent-threshold)
       (indent-region beg end nil)))

 (defadvice yank (after yank-indent activate)
   "If current mode is one of 'yank-indent-modes,
 indent yanked text (with prefix arg don't indent)."
   (if (and (not (ad-get-arg 0))
            (not (member major-mode yank-indent-blacklisted-modes))
            (or (derived-mode-p 'prog-mode)
                (member major-mode yank-indent-modes)))
       (let ((transient-mark-mode nil))
         (yank-advised-indent-function (region-beginning) (region-end)))))

 (defadvice yank-pop (after yank-pop-indent activate)
   "If current mode is one of `yank-indent-modes',
 indent yanked text (with prefix arg don't indent)."
   (when (and (not (ad-get-arg 0))
              (not (member major-mode yank-indent-blacklisted-modes))
              (or (derived-mode-p 'prog-mode)
                  (member major-mode yank-indent-modes)))
     (let ((transient-mark-mode nil))
       (yank-advised-indent-function (region-beginning) (region-end)))))

 ;; prelude-core.el
 (defun indent-buffer ()
   "Indent the currently visited buffer."
   (interactive)
   (indent-region (point-min) (point-max)))

 ;; prelude-editing.el
 (defcustom prelude-indent-sensitive-modes
   '(coffee-mode python-mode slim-mode haml-mode yaml-mode)
   "Modes for which auto-indenting is suppressed."
   :type 'list)

 (defun indent-region-or-buffer ()
   "Indent a region if selected, otherwise the whole buffer."
   (interactive)
   (unless (member major-mode prelude-indent-sensitive-modes)
     (save-excursion
       (if (region-active-p)
           (progn
             (indent-region (region-beginning) (region-end))
             (message "Indented selected region."))
         (progn
           (indent-buffer)
           (message "Indented buffer.")))
       (whitespace-cleanup))))

 (global-set-key (kbd "C-c i") 'indent-region-or-buffer)

 ;; add duplicate line function from Prelude
 ;; taken from prelude-core.el
 (defun prelude-get-positions-of-line-or-region ()
   "Return positions (beg . end) of the current line
 or region."
   (let (beg end)
     (if (and mark-active (> (point) (mark)))
         (exchange-point-and-mark))
     (setq beg (line-beginning-position))
     (if mark-active
         (exchange-point-and-mark))
     (setq end (line-end-position))
     (cons beg end)))

 ;; smart openline
 (defun prelude-smart-open-line (arg)
   "Insert an empty line after the current line.
 Position the cursor at its beginning, according to the current mode.
 With a prefix ARG open line above the current line."
   (interactive "P")
   (if arg
       (prelude-smart-open-line-above)
     (progn
       (move-end-of-line nil)
       (newline-and-indent))))

 (defun prelude-smart-open-line-above ()
   "Insert an empty line above the current line.
 Position the cursor at it's beginning, according to the current mode."
   (interactive)
   (move-beginning-of-line nil)
   (newline-and-indent)
   (forward-line -1)
   (indent-according-to-mode))

 (global-set-key (kbd "M-o") 'prelude-smart-open-line)
 #+END_SRC

**** Avy
 #+BEGIN_SRC emacs-lisp
 (require 'avy)
 (require 'avy-zap)
 (setq avy-all-windows nil)
 (global-set-key (kbd "C-:") 'avy-goto-char)
 (global-set-key (kbd "C-;") 'avy-goto-word-1)
 (global-set-key (kbd "M-;") 'avy-goto-line)
 #+END_SRC
* Development/Writing
** Project Management
*** Projectile
 #+BEGIN_SRC emacs-lisp
 (require 'projectile)
 (projectile-global-mode)
 (setq projectile-enable-caching t)

 #+END_SRC
*** Magit
 #+BEGIN_SRC emacs-lisp
 (when (not (string= system-type "windows-nt"))
            (require 'magit)
            (global-set-key (kbd "C-x g") 'magit-status))
 #+END_SRC
** Helm
*** Basic Configuration
 #+BEGIN_SRC emacs-lisp
   (setq helm-gtags-prefix-key "\C-cg")

   (require 'helm-config)
   (require 'helm-grep)
   (when (executable-find "curl")
     (setq helm-google-suggest-use-curl-p t))
   (setq helm-scroll-amount 4
    helm-ff-search-library-in-sexp t
    helm-split-window-in-side-p t
    helm-candidate-number-limit 500
    helm-ff-file-name-history-use-recentf t
    helm-move-to-line-cycle-in-source t
    helm-buffers-fuzzy-matching t)
   (setq helm-locate-fuzzy-match t helm-apropos-fuzzy-match t)
   (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
   (add-hook 'eshell-mode-hook
             #'(lambda ()
                 (define-key eshell-mode-map (kbd "M-l")  'helm-eshell-history)))
   (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)
   (helm-autoresize-mode t)
   (require 'helm-descbinds)
   (helm-descbinds-mode t)
 #+END_SRC
*** Packages
**** Helm-dash
 #+BEGIN_SRC emacs-lisp
   (require 'helm-dash)
 #+END_SRC
**** Helm-swoop
 #+BEGIN_SRC emacs-lisp
 (require 'helm-swoop)
 (setq helm-multi-swoop-edit-save t)
 (setq helm-swoop-split-with-multiple-windows t)
 (setq helm-swoop-split-direction 'split-window-vertically)
 (setq helm-swoop-speed-or-color t)
 (helm-mode 1)
 #+END_SRC

**** Helm-projectile
 #+BEGIN_SRC emacs-lisp
 (require 'helm-projectile)
 (helm-projectile-on)
 (setq projectile-completion-system 'helm)
 (setq projectile-indexing-method 'alien)

 #+END_SRC
*** Helm Keybindings
    :PROPERTIES:
    :ID:       095241cf-a75d-4820-850f-b8d39baf56a4
    :END:
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c h") 'helm-command-prefix)
   (global-unset-key (kbd "C-x c"))
   (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
   (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
   (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
   (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
   (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
   (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)
   (global-set-key (kbd "M-x") 'helm-M-x)
   (global-set-key (kbd "M-y") 'helm-show-kill-ring)
   (global-set-key (kbd "C-x b") 'helm-mini)
   (global-set-key (kbd "C-x C-f") 'helm-find-files)
   (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
   (global-set-key (kbd "C-c h o") 'helm-occur)
   (global-set-key (kbd "C-c h C-c w") 'helm-wikipedia-suggest)
   (global-set-key (kbd "C-c h x") 'helm-register)
   ;; (global-set-key (kbd "C-x r j") 'jump-to-register)
   (define-key 'help-command (kbd "C-f") 'helm-apropos)
   (define-key 'help-command (kbd "r") 'helm-info-emacs)
   (define-key 'help-command (kbd "C-l") 'helm-locate-library)
   (define-key minibuffer-local-map (kbd "M-p") 'helm-minibuffer-history)
   (define-key minibuffer-local-map (kbd "M-n") 'helm-minibuffer-history)
   (define-key global-map [remap find-tag] 'helm-etags-select)
   (define-key global-map [remap list-buffers] 'helm-buffers-list)
   (global-set-key (kbd "C-c h o") 'helm-swoop)
   (global-set-key (kbd "C-c s") 'helm-multi-swoop-all)
   (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
   (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
 #+END_SRC
** Yasnippet
 #+BEGIN_SRC emacs-lisp
 (require 'yasnippet)
 (yas-global-mode 1)
 (set 'yas-verbosity 1)
 (add-hook 'term-mode-hook (lambda() (setq yas-dont-activate t)))
 #+END_SRC
** Terminal Usage
 #+BEGIN_SRC emacs-lisp
 (require 'multi-term)
 (global-set-key (kbd "<f6>") 'multi-term-next)
 (global-set-key (kbd "C-<f6>") 'multi-term)
 (when (require 'term nil t) ; only if term can be loaded..
   (setq term-bind-key-alist
         (list (cons "C-c C-c" 'term-interrupt-subjob)
               (cons "C-p" 'previous-line)
               (cons "C-n" 'next-line)
               (cons "M-f" 'term-send-forward-word)
               (cons "M-b" 'term-send-backward-word)
               (cons "C-c C-j" 'term-line-mode)
               (cons "C-c C-k" 'term-char-mode)
               (cons "M-DEL" 'term-send-backward-kill-word)
               (cons "M-d" 'term-send-forward-kill-word)
               (cons "<C-left>" 'term-send-backward-word)
               (cons "<C-right>" 'term-send-forward-word)
               (cons "C-r" 'term-send-reverse-search-history)
               (cons "M-p" 'term-send-raw-meta)
               (cons "M-y" 'term-send-raw-meta)
               (cons "C-y" 'term-send-raw))))
 (define-key term-raw-map (kbd "C-c C-j") 'term-line-mode)
 #+END_SRC
** Latex/Auctex
 #+BEGIN_SRC emacs-lisp
 (require 'latex)
 (set 'TeX-auto-save t)
 (set 'TeX-parse-self t)
 (setq-default TeX-master nil)
 (latex-preview-pane-enable)
 (set 'doc-view-continuous t)
 (require 'company-auctex)
 (company-auctex-init)
 #+END_SRC
** Company
*** Basic
 #+BEGIN_SRC emacs-lisp
 (require 'cc-mode)
   (require 'company)
   (defun diminished-global-company-mode ()
   "Diminsh company mode properly"
   (interactive)
   (global-company-mode t)
   (diminish 'company-mode)
   )
   (add-hook 'after-init-hook 'diminished-global-company-mode)
   (delete 'company-semantic company-backends)
   (semantic-mode -1)
   (setq company-idle-delay 0.00001)
   (setq company-tooltip-idle-delay 0.00001)
 #+END_SRC


*** Yasnippet
 #+BEGIN_SRC emacs-lisp


 (when (featurep 'yasnippet)
   ;; Add yasnippet support for all company backends
   ;; https://github.com/syl20bnr/spacemacs/pull/179
   (defvar company-mode/enable-yas t
     "Enable yasnippet for all backends.")
   (defun company-mode/backend-with-yas (backend)
     (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
         backend
       (append (if (consp backend) backend (list backend))
               '(:with company-yasnippet))))

   (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
   (global-set-key (kbd "C-c y") 'company-yasnippet)
   )


 #+END_SRC
** Flycheck
 #+BEGIN_SRC emacs-lisp
 (require 'flycheck)
 (require 'company)
 (setq flycheck-idle-change-delay 0.00001)
 (global-flycheck-mode)


 #+END_SRC
** Web Development
#+BEGIN_SRC emacs-lisp
(require 'web-mode)
#+END_SRC
** C/C++
*** Basic Settings
 #+BEGIN_SRC emacs-lisp
 (setq
  c-default-style "stroustrup" ;; set style to "stroustrup"
  )
 (add-hook 'c-mode-common-hook 'hs-minor-mode)
 #+END_SRC
*** Packages
**** Company
 #+BEGIN_SRC emacs-lisp
 (define-key c-mode-map  [(tab)] 'company-complete)
 (define-key c++-mode-map  [(tab)] 'company-complete)
 (define-key c-mode-map (kbd "TAB") 'company-complete)
 (define-key c++-mode-map (kbd "TAB") 'company-complete)
 #+END_SRC
***** C-headers
 #+BEGIN_SRC emacs-lisp
 (require 'company-c-headers)
 (when (string= system-name "arch-desktop") (add-to-list 'company-c-headers-path-system "/usr/include/c++/6.1.1/"))
 (when (string= system-name "virtualbox") (add-to-list 'company-c-headers-path-system "/usr/lib64/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/")
       (
        add-to-list 'company-c-headers-path-system "/usr/lib64/gcc/x86_64-pc-linux-gnu/4.9.3/include/")
       )
 (add-to-list 'company-backends 'company-c-headers)

 #+END_SRC
**** Irony Mode
 #+BEGIN_SRC emacs-lisp
 (require 'irony)
 (require 'company-irony)
 (defun my-irony-mode-hook()
   (define-key irony-mode-map [remap completion-at-point]
     'irony-completion-at-point-async)
   (define-key irony-mode-map [remap complete-symbol]
     'irony-completion-at-point-async))
 (add-hook 'irony-mode-hook 'my-irony-mode-hook)
 (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

 (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)

 (require 'company-irony-c-headers)

 (eval-after-load 'company
   '(add-to-list
     'company-backends '(company-irony-c-headers company-irony)))


 #+END_SRC
**** YCMD
 #+BEGIN_SRC emacs-lisp
    (when (file-exists-p "/home/einarelen/src/ycmd/ycmd/")
    (require 'ycmd)
    (require 'company-ycmd)

   (add-hook 'c-mode-hook 'ycmd-mode)
   (add-hook 'c++-mode-hook 'ycmd-mode)

    (defun diminish-ycmd-hook () "Diminish ycmd-mode"
           (interactive)
           (diminish 'ycmd-mode)
           )
    (add-hook 'after-init-hook 'diminish-ycmd-hook)
    ;(add-hook 'c-mode-hook 'ycmd-mode-hook)
    (set-variable 'ycmd-server-command '("python" "/home/einarelen/src/ycmd/ycmd/"))
    (company-ycmd-setup)
    )

 #+END_SRC
**** Flycheck
 #+BEGIN_SRC emacs-lisp
 (defun another-flycheck-rtags-setup()
 (interactive)
 (flycheck-select-checker 'rtags)
  (setq-local flycheck-highlighting-mode nil)
  (setq-local flycheck-check-syntax-automatically nil)
  (rtags-enable-standard-keybindings)
  )
 (when (featurep 'flycheck-rtags)
 (add-hook 'c-mode-common-hook 'another-flycheck-rtags-setup))

 (setq-local flycheck-highlighting-mode nil)
 (when (featurep 'irony) (require 'flycheck-irony)
       (eval-after-load 'flycheck
         '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
       )
 (when (and (featurep 'ycmd) (file-exists-p "/home/einarelen/src/ycmd/ycmd/"))
 (require 'flycheck-ycmd)
 (flycheck-ycmd-setup))

 #+END_SRC
**** Function Args
 (require 'function-args)
 (fa-config-default)
**** Clang Format
 #+BEGIN_SRC emacs-lisp
 (require 'clang-format)
 (define-key c++-mode-map (kbd "C-c f") 'clang-format-region)
 (define-key c++-mode-map (kbd "C-c C-f") 'clang-format-buffer)
 (define-key c-mode-map (kbd "C-c f") 'clang-format-region)
 (define-key c-mode-map (kbd "C-c C-f") 'clang-format-buffer)
 #+END_SRC
*** C/C++ Keybindings
* Org Mode
** Basic Setup
#+BEGIN_SRC emacs-lisp
    (require 'org)
    (defun re-parse-configurations ()
      "Reparse the main configuration file"
      (interactive)
      (org-babel-load-file "~/.emacs.d/configurations.org")
      )
    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cb" 'org-iswitchb)
  (global-set-key (kbd "C-c c") 'org-capture)
(setq org-default-notes-file "~/.emacs.d/org/refile.org")
  (setq org-use-fast-todo-selection t)
#+END_SRC
** Todo 
#+BEGIN_SRC emacs-lisp

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC
** Agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-dim-blocked-tasks nil)
(setq org-agenda-compact-blocks t)
#+END_SRC
** Calendar 
#+BEGIN_SRC emacs-lisp
  (require 'calfw)
  (require 'calfw-org)
  (require 'org-gcal)
  (setq org-gcal-client-id "393897935817-6f7lc36osa9o9kqc10u65hhstu8idp4o.apps.googleusercontent.com" org-gcal-client-secret "GIgx5Re1yKKboMSPn1aUREs8" org-gcal-file-alist '(("einar.elen@gmail.com" . "/home/einarelen/ownCloud/org/cal/main.org")))


  ;;; https://calendar.google.com/calendar/ical/einar.elen%40gmail.com/private-97060e03f66653b16c4d6c7164f8d633/basic.ics
#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages 
   'org-babel-load-languages
   '((C . t) (emacs-lisp . t) (python . t) (sh . t) (gnuplot . t)))
#+END_SRC
** Refile and Capture
#+BEGIN_SRC emacs-lisp

    (setq org-capture-templates
          (quote (("t" "todo" entry (file "~/.emacs.d/org/refile.org")
                   "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                  ("r" "respond" entry (file "~/.emacs.d/org/refile.org")
                   "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
                  ("n" "note" entry (file "~/.emacs.d/org/refile.org")
                   "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                  ("j" "Journal" entry (file+datetree "~/.emacs.d/org/diary.org")
                   "* %?\n%U\n" :clock-in t :clock-resume t)
                  ("w" "org-protocol" entry (file "~/.emacs.d/org/refile.org")
                   "* TODO Review %c\n%U\n" :immediate-finish t)
                  ("m" "Meeting" entry (file "~/.emacs.d/org/refile.org")
                   "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                  ("p" "Phone call" entry (file "~/.emacs.d/org/refile.org")
                   "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                  ("h" "Habit" entry (file "~/.emacs.d/org/refile.org")
                   "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
                  ("d" "daily" entry (file+datetree "~/.emacs.d/org/dailies/what-normal-beings-do-and-dailies.org")
                   ""))))

    (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                     (org-agenda-files :maxlevel . 9))))
    (setq org-refile-use-outline-path t)
    (setq org-refile-allow-creating-parent-nodes 'confirm)

    (setq org-indirect-buffer-display 'current-window)

#+END_SRC
** Daily Checks
#+BEGIN_SRC emacs-lisp
    (defun daily-checklist () "Open the daily checklist file"
           (interactive)
           (find-file "~/.emacs.d/org/dailies/what-normal-beings-do-and-dailies.org")
           )
  (setq org-publish-project-alist
        '(("dailies-html"
        :base-directory "~/.emacs.d/org/dailies/"
        :base-extension "org"
        :publishing-directory "~/.emacs.d/org/html/"
        :publishing-function org-html-publish-to-html)
        ("dailies-pdf"
         :base-directory "~/.emacs.d/org/dailies/"
         :base-extension "org"
         :publishing-directory "~/.emacs.d/org/tex/"
         :publishing-function org-latex-publish-to-pdf)))
#+END_SRC
# (setq org-agenda-files "~/.emacs.d/org")
# (define-key org-mode-map (kbd "C-c [") nil)
# (define-key org-mode-map (kbd "C-c ]") nil)
** Publish 
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (defun toggle-org-latex-export-on-save()
    (interactive)
    (if (memq 'org-latex-export-to-pdf after-save-hook)
        (progn (remove-hook 'after-save-hook 'org-latex-export-to-pdf t) (message "Disabled org latex export on save for current buffer..."))
      (add-hook 'after-save-hook 'org-latex-export-to-pdf nil t)
      (message "Enabled org latex export on save for current buffer...")
      ))
#+END_SRC
* Communication
** Email
*** Misc 
#+BEGIN_SRC emacs-lisp
  (require 'gnus-dired)
  ;; make the `gnus-dired-mail-buffers' function also work on
  ;; message-mode derived modes, such as mu4e-compose-mode
  (defun gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                     (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))

  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_SRC
*** Mu4e
 #+BEGIN_SRC emacs-lisp
   (when (file-exists-p "/usr/local/bin/mu")
   (add-to-list 'load-path "~/.emacs.d/mu4e/")
      (when (require 'mu4e nil 'noerror)
        (require 'mu4e)
        (require 'mu4e-contrib)
        (setq mu4e-maildir "~/Maildir")
        (setq mu4e-drafts-folder "/[Gmail].Drafts")
        (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
        (setq mu4e-trash-folder  "/[Gmail].Trash")
        (setq mu4e-sent-messages-behavior 'delete)
        (setq mu4e-maildir-shortcuts
              '( ("/INBOX"               . ?i)
                 ("/[Gmail].Sent Mail"   . ?s)
                 ("/[Gmail].Trash"       . ?t)
                 ("/[Gmail].All Mail"    . ?a)))
        (setq mu4e-get-mail-command "offlineimap")
        (setq mu4e-update-interval 450)
        (setq user-full-name "Einar El√©n" user-mail-address "einar.elen@gmail.com")
        (require 'smtpmail)
        (setq message-send-mail-function 'smtpmail-send-it
              smtpmail-stream-type 'starttls
              smtpmail-default-smtp-server "smtp.gmail.com"
              smtpmail-smtp-server "smtp.gmail.com"
              smtpmail-smtp-service 587)
        (setq mu4e-html2text-command 'mu4e-shr2text)
        (defun run-mu4e-after-init ()      (mu4e))
        (add-hook 'after-init-hook 'run-mu4e-after-init)
        ))
 #+END_SRC
*** Gnus
** IRC
#+BEGIN_SRC emacs-lisp

  ;(setq erc-autojoin-channels-alist '(("freenode.net" "#emacs" "#c++")))
  ;(erc :server "irc.freenode.net" :port "6667" :nick "einarelen")
#+END_SRC
* Utilities
** Lastpass
 #+BEGIN_SRC emacs-lisp
 (defun lp-login (login-name)
   "Testing"
   (interactive "sLastpass account: ")
   (shell-command (concat "lpass login " login-name)))

 (defun lp-ls
     (&optional args &optional output-buffer &optional error-buffer)
   "Derp"
   (interactive "s(Optional) Groupname:
 s(Optional) Output buffer: ")
   (if (string= output-buffer "")
       (shell-command (concat "lpass ls " args))
     (shell-command (concat "lpass ls " args) output-buffer error-buffer)))

 (defun lp-show (name &optional output-buffer &optional error-buffer)
   "darp"
   (interactive "sName: ")
   (if (string= output-buffer "") (shell-command (concat "lpass show" name))(shell-command (concat "lpass show " name) output-buffer error-buffer)))

 (defun lp-insert-show (name &optional)
   "dlarp"
   (interactive "sName: ") (lp-show name t))
 (defun lp-insert-ls (&optional args)
   "Derp"
   (interactive "s(Optional) Groupname:") (lp-ls args t))

 (defun lp-get-password (name &optional output-buffer &optional error-buffer)
   (interactive "sName: ")
   (lp-show (concat name "| grep password | grep -v sudo | cut -d\" \" -f2 ") output-buffer error-buffer))

 (defun lp-insert-password (name)
   (interactive "sName: ")
   (lp-get-password name t)
   )
 #+END_SRC
** Diminish
 #+BEGIN_SRC emacs-lisp
 (require 'diminish)
 (diminish 'anzu-mode)
 (diminish 'projectile-mode)
 (diminish 'undo-tree-mode)
 (diminish 'color-identifiers-mode)
 (diminish 'ws-butler-mode)
 (diminish 'smartparens-mode)
 (diminish 'volatile-highlights-mode)
 (diminish 'auto-revert-mode)
 (diminish 'ycmd-mode)
 (diminish 'company-mode)
 (diminish 'helm-mode)
 (diminish 'abbrev-mode)
 (diminish 'hs-minor-mode)
 (diminish 'function-args-mode)

 #+END_SRC
#+BEGIN_SRC emacs-lisp
    (defun switch-configuration() "Cycle between current buffer, configuration file and dailies" (interactive)
           (when (and (not (boundp 'return-is-next)) (and (not (boundp 'stored-buffer)) (and (not (boundp 'dailies-is-next))) (not (boundp 'current-buffer))))
             (setq stored-buffer nil current-buffer nil return-is-next nil dailies-is-next nil)
             )
           (when (not (bound-and-true-p stored-buffer))
             (setq stored-buffer (current-buffer)
                   dailies-is-next t vars-are-set t)
             (configuration-file)
             )
           (when (and dailies-is-next (not vars-are-set))
             (setq return-is-next t vars-are-set t dailies-is-next nil)
             (daily-checklist)
             )
           (when (and return-is-next (not vars-are-set))
             (let ((tmp stored-buffer))
               (setq stored-buffer nil return-is-next nil)
               (switch-to-buffer tmp)
               )
             )
    (setq vars-are-set nil)
    )
  (defun switch-to-mu4e() "Cycle to mu4e and back without turning it off"
         (interactive)
         (when (and (not (boundp 'mu4e-is-next)) (not (boundp 'return-from-mu4e-is-next))) 
         (setq return-from-mu4e-is-next nil mu4e-stored-buffer nil mu4e-is-next t))

           (when (and (bound-and-true-p mu4e-stored-buffer) 
           (bound-and-true-p return-from-mu4e-is-next))
             (let ((tmp mu4e-stored-buffer))
               (setq mu4e-stored-buffer nil mu4e-is-next t return-from-mu4e-is-next nil)
               (switch-to-buffer tmp)
               ))

           (when (and (not (bound-and-true-p return-from-mu4e-is-next))
           (and (not (bound-and-true-p mu4e-stored-buffer)) 
           (bound-and-true-p mu4e-is-next)))
             (setq mu4e-stored-buffer (current-buffer) 
             return-from-mu4e-is-next t mu4e-is-next nil) (mu4e))

)
     (global-set-key (kbd "<f7>") 'switch-to-mu4e)
    (global-set-key (kbd "<f8>") 'switch-configuration)
#+END_SRC
* Keybindings
[[*Text Editing][Text Editing]]
[[*Magit][Magit]]
[[*Helm Keybindings][Helm]]
