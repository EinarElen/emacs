#+AUTHOR: Einar El√©n
#+EMAIL: einar.elen@gmail.com
#+OPTIONS: toc:3 html5-fancy:t org-html-preamble:nil
#+HTML_DOCTYPE_HTML5: t 
#+PROPERTY: header-args :tangle yes :noweb yes :comments both
#+STARTUP: noinlineimages
#+BEGIN_SRC emacs-lisp :tangle on
(set-buffer-file-coding-system 'utf-8)
#+END_SRC
* Better default settings
#+BEGIN_SRC emacs-lisp 
(use-package clipmon
:config (clipmon-mode)
)
#+END_SRC
** Backups 
 From [[http://pragmaticemacs.com/emacs/auto-save-and-backup-every-save/][Pragmatic emacs]]

 #+BEGIN_SRC emacs-lisp
;; auto save often
;; save every 20 characters typed (this is the minimum)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; backup settings                                                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; https://www.emacswiki.org/emacs/BackupFiles
(setq
 backup-by-copying t     ; don't clobber symlinks
 kept-new-versions 10    ; keep 10 latest versions
 kept-old-versions 5     ; don't bother with old versions
 delete-old-versions t   ; don't ask about deleting old versions
 version-control t       ; number backups
 vc-make-backup-files t) ; backup version controlled files(setq auto-save-interval 20)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; backup every save                                                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files
;; https://www.emacswiki.org/emacs/backup-each-save.el
;; These are defined in defined in customize file
;; elib-backup-file-size-limit
;; elib-backup-location
;; elib-backup-trash-dir
;; elib-backup-exclude-regexp  

;; Default and per-save backups go here:
;; N.B. backtick and comma allow evaluation of expression
;; when forming list
(setq backup-directory-alist
      `(("" . ,(expand-file-name "per-save" elib-backup-location))))
;; add trash dir if needed
(if elib-backup-exclude-regexp
    (add-to-list 'backup-directory-alist `(,elib-backup-exclude-regexp . ,elib-backup-trash-dir)))

;; add to save hook
(add-hook 'before-save-hook 'elib-backup-every-save)
(setq create-lockfiles nil)
(setq tramp-default-method "ssh")
 #+END_SRC

 #+RESULTS:
** Paradox
* Evil mode 
#+BEGIN_SRC emacs-lisp
;; Must be set before loading evil
(setq evil-disable-insert-state-bindings t)
(setq evil-want-keybinding nil)
(use-package evil :ensure t
:config 
)
(setq evil-move-beyond-eol t)

(use-package evil-collection :ensure t 
:config
   (setq evil-collection-setup-minibuffer t)
   (evil-collection-init))
(use-package evil-tutor :ensure t)
(use-package org-evil :ensure t
)
(use-package evil-mc :ensure t)
(use-package evil-textobj-column :ensure t)
(use-package evil-surround :ensure t 
:config 
(global-evil-surround-mode)
)
(use-package evil-smartparens :ensure t 
:hook (smart-parens-enabled-hook . evil-smartparens-mode)
)
(setq evil-normal-state-tag "NORMAL")
(setq evil-emacs-state-tag "EMACS")
(setq evil-insert-state-tag "INSERT")
(setq evil-visual-state-tag "VISUAL")
;(use-package evil-mu4e :ensure t)
(use-package evil-numbers :ensure t) 
;; (use-package evil-avy :ensure t)
(use-package evil-multiedit :ensure t)
(evil-multiedit-default-keybinds)
(use-package evil-args :ensure t)
 
(use-package evil-easymotion :ensure t)
(use-package evil-embrace :ensure t)
(evil-embrace-enable-evil-surround-integration)
(use-package evil-escape :ensure t)
(evil-escape-mode t)
(use-package evil-exchange :ensure t)
(use-package evil-indent-plus :ensure t)
;(use-package evil-nerd-commenter :ensure t)
(use-package evil-commentary :ensure t)
(evil-commentary-mode)
(use-package evil-matchit :ensure t)
(global-evil-matchit-mode t)
(use-package evil-numbers :ensure t)
(use-package evil-textobj-anyblock :ensure t)

(use-package evil-snipe :ensure t)
(use-package evil-surround :ensure t)
(use-package evil-vimish-fold :ensure t)
(use-package evil-exchange :ensure t )
(evil-exchange-install)
(use-package evil-extra-operator :ensure t )
(global-evil-extra-operator-mode 1)

(use-package evil-visualstar :ensure t)
(global-evil-visualstar-mode)
(use-package exato :ensure t)
(use-package evil-quickscope :ensure t)


(use-package treemacs-evil :ensure t)
#+END_SRC

#+RESULTS:
* Helpful
  
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :config
(setq helm-describe-function-function 'helpful-callable)
(setq helm-describe-variable-function 'helpful-variable)
  )
#+END_SRC


* General 
#+BEGIN_SRC emacs-lisp 
(use-package general
:config 
  (setq general-override-states '(insert
                                  emacs
                                  hybrid
                                  normal
                                  visual
                                  motion
                                  operator
                                  replace))
)
#+END_SRC

* Frame Purpose
** Package
  We want new frames to open as maximized so we modify
  default-frame-alist. We want to use dired rather than magit by
  default when opening a new frame. 

  #+BEGIN_SRC emacs-lisp 
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(use-package frame-purpose)
(use-package frame-workflow
  :load-path elib-frame-workflow-dir
  :config
  (frame-workflow-mode 1))				   
#+END_SRC
** Remaining 

#+BEGIN_SRC emacs-lisp 
(use-package helm-frame-workflow
     :load-path elib-frame-workflow-dir)
#+END_SRC
 #+RESULTS:

** Frames 
*** Emacs Configuration subject
  #+BEGIN_SRC emacs-lisp 
  (frame-workflow-define-subject "Configuration"
      :key "c"
      :make-frame
      '(frame-purpose-make-frame
	:filenames (rx-to-string `(seq bos ,(expand-file-name user-emacs-config-directory)))
	:title "Configuration"
	:sidebar nil
	:sidebar-buffers-fn '(lambda ()
                   (delete-other-windows)
                   (find-file elib-init-configuration-org)
                   (list (current-buffer))
                   )))
#+END_SRC

 #+RESULTS:
*** Master
#+BEGIN_SRC emacs-lisp
(frame-workflow-define-subject "Master"
  :make-frame
  '(frame-purpose-make-frame
    :filenames (rx-to-string `(seq bos ,(expand-file-name "/home/einarelen/master/")))
    :title "Master"
    :sidebar nil
    :sidebar-buffers-fn '(lambda ()
                           (list (current-buffer))
			   ))
  :layout `(,(lambda () (find-file "/home/einarelen/master/code.org")))
  )

#+END_SRC 
*** FYTN14
#+BEGIN_SRC emacs-lisp
(frame-workflow-define-subject "FYTN14"
  :make-frame
  '(frame-purpose-make-frame
    :filenames (rx-to-string `(seq bos ,(expand-file-name "/home/einarelen/nextcloud/latex/FYTN14_Artificial_Neural_Networks/")))
    :title "FYTN14"
    :sidebar nil
    :sidebar-buffers-fn '(lambda ()
                           (list (current-buffer))
			   ))
  :layout `(,(lambda () (find-file "/home/einarelen/nextcloud/latex/FYTN14_Artificial_Neural_Networks/")))
  )

#+END_SRC

*** Keybindings subject
#+BEGIN_SRC emacs-lisp
(frame-workflow-define-subject "Keybindings"
  :make-frame
  '(frame-purpose-make-frame 
    :filenames elib-init-keybindings-org
    :title "Keybindings"
    :sidebar nil
    :sidebar-buffers-fn 
'(lambda () (list (current-buffer)))
)
  :layout `(,(lambda () 
	       (delete-other-windows)
	       (find-file elib-init-keybindings-org)
	       (set-frame-name "Keybindings"))))
#+END_SRC
*** Ansible 
#+BEGIN_SRC emacs-lisp
(frame-workflow-define-subject "Ansible"
  :make-frame
  '(frame-purpose-make-frame
    :filenames (rx-to-string `(seq bos ,(expand-file-name "/home/einarelen/ansible/")))
    :title "Ansible"
    :sidebar nil
    :sidebar-buffers-fn '(lambda ()
                           (list (current-buffer))
			   ))
  :layout `(,(lambda () 
(find-file "/home/einarelen/ansible/local.yml")
(split-window-right)
(find-file "/home/einarelen/ansible/tasks/")
(split-window)
(find-file "/home/einarelen/ansible/files/")
)))
  
#+END_SRC

#+RESULTS:
: #s(frame-workflow-subject unbound "Ansible" "Ansible" frame-workflow-observer (frame-purpose-make-frame :filenames (rx-to-string `(seq bos ,(expand-file-name "/home/einarelen/ansible/"))) :title "Ansible" :sidebar nil :sidebar-buffers-fn '(lambda nil (list (current-buffer)))) ((lambda nil (find-file "/home/einarelen/ansible/local.yml") (split-window-right) (find-file "/home/einarelen/ansible/tasks/") (split-window) (find-file "/home/einarelen/ansible/files/"))) nil nil)

*** Init subject 
#+BEGIN_SRC emacs-lisp
(frame-workflow-define-subject "Init"
  :layout `(,(lambda () 
	       (delete-other-windows)
	       (find-file elib-init-init-org)
	       (set-frame-name "Init"))))
#+END_SRC
*** Custom Functions 
#+BEGIN_SRC emacs-lisp
(frame-workflow-define-subject "Custom_Functions"
  :layout `(,(lambda () 
	       (delete-other-windows)
	       (find-file elib-init-custom_functions-org)
	       (set-frame-name "Custom Functions"))))
#+END_SRC
*** External 
#+BEGIN_SRC emacs-lisp
(frame-workflow-define-subject "Load-External"
  :layout `(,(lambda () 
	       (delete-other-windows)
	       (find-file elib-init-load-external-org)
	       (set-frame-name "Load External"))))
#+END_SRC
*** Customize 
#+BEGIN_SRC emacs-lisp
(frame-workflow-define-subject "Customize"
  :layout `(,(lambda () 
	       (delete-other-windows)
	       (find-file elib-init-custom-org)
	       (set-frame-name "Customize"))))
#+END_SRC
*** Bibtex 
#+BEGIN_SRC emacs-lisp
(frame-workflow-define-subject "Bibtex"
  :make-frame
  '(frame-purpose-make-frame
    :filenames (rx-to-string `(seq bos ,(file-name-as-directory  elib-bibliography-dir)))
    :title "Bibtex"
    :sidebar nil
    :sidebar-buffers-fn '(lambda ()
			   (delete-other-windows)
			   (find-file elib-default-bibtex-file)
			   (list (current-buffer)))))
#+END_SRC
*** Calendar subject
#+BEGIN_SRC emacs-lisp 
  (frame-workflow-define-subject "Calendar"
      :key "q"
      :make-frame
      '(frame-purpose-make-frame
	:modes '(cfw:calendar-mode)
	:title "Calendar"
	:sidebar nil
	:sidebar-buffers-fn '(lambda ()
                   (delete-other-windows)
                   (elib-open-calendar)
                   (list (current-buffer))
                   ) 
	)
      )
#+END_SRC

#+RESULTS:
: #s(frame-workflow-subject unbound "Calendar" "Calendar" frame-workflow-observer (frame-purpose-make-frame :modes '(cfw:calendar-mode) :title "Calendar" :sidebar nil :sidebar-buffers-fn '(lambda nil (delete-other-windows) (elib-open-calendar) (list (current-buffer)))) nil nil nil)

*** Org brain subject 
#+BEGIN_SRC emacs-lisp 
  (frame-workflow-define-subject "Brain"
      :key "b"
       :make-frame
      '(frame-purpose-make-frame
	:filenames (rx-to-string `(seq bos ,(file-name-as-directory  org-brain-path)))
	:title "Brain"
	:modes '(org-brain-visualize-mode)
	:sidebar nil
	:sidebar-buffers-fn '(lambda ()
                   (delete-other-windows)
                   (org-brain-visualize "INDEX")
                   (list (current-buffer))
                   ) 
	)
      )
#+END_SRC

*** Mail subject
#+BEGIN_SRC emacs-lisp 
  (frame-workflow-define-subject "Mail"
      :key "m"
      :make-frame
      '(frame-purpose-make-frame
	:modes '(mu4e-mode  mu4e-main-mode mu4e-headers-mode org-msg-edit-mode mu4e-view-mode)
	:title "Email"
	:sidebar nil
	:sidebar-buffers-fn '(lambda ()
                   (delete-other-windows)
                   (mu4e)
                 (list (current-buffer))
                   ) 
	)
      )
 #+END_SRC

 
** Run from emaccsclients
   

#+BEGIN_SRC emacs-lisp
(defun elib-do-select-frame-from-emacsclient (name)
(interactive)
(let ((cf (selected-frame)
 
)
(symb (intern (concat "frame-workflow-switch-to-subject/" name)))
)
(call-interactively symb)
(delete-frame cf)
)

)

#+END_SRC
* Key packages 
** Which-key 
#+BEGIN_SRC emacs-lisp 
(use-package which-key
  :diminish which-key-mode
  :defer nil
  :config
 (which-key-mode t))
#+END_SRC

** PDF-Tools
#+BEGIN_SRC emacs-lisp 
(use-package pdf-tools
  :defer nil
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (add-hook 'image-mode-hook 'elib-disable-line-numbers-hook)
  (add-hook 'pdf-view-mode-hook 'elib-disable-line-numbers-hook))
(use-package pdf-annot
  :ensure nil)
;(use-package org-pdfview)
;(use-package org-pdftools :ensure t)  
(setq elib-org-pdftools (concat elib-external-lisp-dir "org-pdftools"))
(use-package org-pdftools 
:load-path elib-org-pdftools
) 


#+END_SRC
** Org Mode
*** Main package 
#+BEGIN_SRC emacs-lisp 
(use-package org 
:ensure org-plus-contrib)
#+END_SRC
*** Org brain 
#+BEGIN_SRC emacs-lisp 

(use-package ascii-art-to-unicode 
:config

(defface aa2u-face '((t . nil))
  "Face for aa2u box drawing characters")
(advice-add #'aa2u-1c :filter-return
            (lambda (str) (propertize str 'face 'aa2u-face)))
(defun aa2u-org-brain-buffer ()
  (let ((inhibit-read-only t))
    (make-local-variable 'face-remapping-alist)
    (add-to-list 'face-remapping-alist
                 '(aa2u-face . org-brain-wires))
    (ignore-errors (aa2u (point-min) (point-max)))))
(add-hook 'org-brain-after-visualize-hook #'aa2u-org-brain-buffer)
)
(use-package org-brain
:config 
(add-hook 'org-brain-after-resource-button-functions #'org-brain-insert-resource-icon)

)
#+END_SRC
*** Org ref 
#+BEGIN_SRC emacs-lisp 
(use-package org-ref 

)
#+END_SRC
*** Babel 
#+BEGIN_SRC emacs-lisp 
(use-package ob 
  :ensure org-plus-contrib
  :config 
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  )
#+END_SRC

#+RESULTS:

*** Ox
#+BEGIN_SRC emacs-lisp 
(use-package ox-latex
  :ensure org-plus-contrib)
(use-package ox-twbs)
(use-package ox-minutes)
(use-package ox-latex-subfigure)
#+END_SRC

#+BEGIN_SRC sh :tangle no
git clone https://github.com/Kungsgeten/org-brain-export ~/.config/emacs/external/lisp/org-brain-export
#+END_SRCq

#+RESULTS:


#+BEGIN_SRC
(defvar elib-org-brain-export-dir (concat elib-external-lisp-dir "org-brain-export/"))
(use-package a)
(use-package xmlgen)
(use-package org-brain-export 
:load-path elib-org-brain-export-dir
) 
#+END_SRC
*** Reveal 
#+BEGIN_SRC emacs-lisp 
(use-package oer-reveal
  :config 
  (require 'oer-reveal-publish)
  (oer-reveal-setup-submodules t)
  (oer-reveal-generate-include-files t))
#+END_SRC
*** Minor packages

#+BEGIN_SRC emacs-lisp 
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
  (use-package org-sticky-header)
  (use-package org-drill)
  (use-package org-drill-table)
#+END_SRC

 
** Smartparens
#+BEGIN_SRC emacs-lisp 
  (use-package smartparens
    :defer nil
    :diminish smartparens-mode
    :config 
    (require 'smartparens-config)
    (smartparens-global-mode t)
    (smartparens-global-strict-mode t)  
    (sp-pair "\\[" "\\]"))
#+END_SRC
** Helm 
#+BEGIN_SRC emacs-lisp 
(use-package helm
  :diminish
  :config 
  (helm-mode)
  (setq helm-mode-fuzzy-match nil)
  (setq helm-completion-in-region-fuzzy-match t)
  (setq helm-buffers-fuzzy-matching t)
  (setq helm-session-fuzzy-match t)
  (setq helm-recentf-fuzzy-match t)
  (setq helm-M-x-fuzzy-match nil)
  (setq helm-lisp-fuzzy-completion t)
  (setq helm-apropos-fuzzy-match t)
  (setq helm-lisp-fuzzy-completion t)
  (setq helm-locate-fuzzy-match t))
(setq helm-ag-fuzzy-match t)

(use-package helm-descbinds)
(use-package helm-swoop)
(use-package helm-org-rifle)
(use-package helm-proc)
(use-package helm-system-packages)
(use-package helm-bibtex)
;; Helm projectile configured under projectile
;; Helm themes configuerd under themes
(use-package helm-c-yasnippet)
(use-package helm-company)
(use-package helm-ag)
(use-package helm-mu
  :after mu4e)
#+END_SRC

#+RESULTS:

* Key Chords 

#+BEGIN_SRC emacs-lisp
(use-package key-chord
:disabled t
:config 
)
#+END_SRC

* Magit 

#+BEGIN_SRC emacs-lisp
(use-package magit) 
(use-package evil-magit)
#+END_SRC
 
* Jupyter

Dependencies
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode)
(use-package websocket)
(use-package simple-httpd)
(use-package ob-async)
#+END_SRC

#+RESULTS:


#+BEGIN_SRC emacs-lisp
(use-package jupyter)
(use-package jupyter-tramp
  :ensure nil)
#+END_SRC

#+RESULTS:

* Projects 
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :diminish
  :config
  (projectile-global-mode))
(use-package helm-projectile
  :config 
  (helm-projectile-on))
#+END_SRC

#+RESULTS:
: t

* Communication
** Email 
#+BEGIN_SRC emacs-lisp
(when (and elib-mu4e-load-path(file-exists-p elib-mu4e-load-path))
 (use-package mu4e
    
    :load-path elib-mu4e-load-path
    :config
    (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
    (add-hook 'mu4e-compose-pre-hook  'elib-mu4e-set-account)
    (add-hook 'message-send-mail-hook 'elib-choose-msmtp-account)
    (defalias 'mu4e~view-request-attachments-dir 'elib-mu4e-view-request-attachments-dir))

  (use-package helm-mu)

  (use-package mu4e-alert
    :config
    (mu4e-alert-enable-mode-line-display)
    (mu4e-alert-set-default-style 'libnotify))
  (use-package org-mime)
  (use-package org-msg
    :config
    )
(org-msg-mode))
#+END_SRC

* Dependencies 
#+BEGIN_SRC emacs-lisp 
(use-package htmlize)
#+END_SRC
* Snippets and completion
** Company 
*** Packages
 #+BEGIN_SRC emacs-lisp
   (use-package company :ensure t
     :config (global-company-mode))
   (use-package company-shell :ensure t)
   (use-package company-quickhelp
     :ensure t
     :config
     (company-quickhelp-mode))
   (use-package helm-company
     :ensure t
     :bind ("C-:" . helm-company))
   (use-package company-auctex
     :ensure t)
   (use-package company-yasnippet     
     :ensure nil)
   (use-package company-elisp
     :ensure nil)
   (use-package company-box
:disabled t
     :ensure t
     :hook (company-mode . company-box-mode))
#+END_SRC

#+RESULTS:
| company-box-mode | company-mode-set-explicitly |

*** Backends

#+BEGIN_SRC emacs-lisp :tangle no
  (spacemacs|defvar-company-backends erc-mode)
  (spacemacs|defvar-company-backends org-mode)
  (spacemacs|defvar-company-backends emacs-lisp-mode)
  (spacemacs|defvar-company-backends python-mode)
  (spacemacs|defvar-company-backends c++-mode)
  (spacemacs|defvar-company-backends latex-mode)
  (spacemacs|defvar-company-backends eshell-mode)
  (spacemacs|defvar-company-backends inferior-python-mode)
  (spacemacs|defvar-company-backends pip-requirements-mode)
  (spacemacs|defvar-company-backends sh-mode)
  (spacemacs|defvar-company-backends ielm-mode)
  (add-to-list 'company-backends-sh-mode 'company-shell)
  (add-hook 'inferior-python-mode-hook (lambda ()
					 (setq-local company-minimum-prefix-length 0)
					 (setq-local company-idle-delay 0.5)))

  (add-to-list 'company-backends-org-mode 'company-capf)
  (add-to-list 'company-backends-org-mode 'company-elisp)

  (add-to-list 'company-backends-emacs-lisp-mode 'company-capf)
  (add-to-list 'company-backends-eshell-mode 'company-capf)

  (add-to-list 'company-backends-emacs-lisp-mode 'company-elisp )

  (add-to-list 'company-backends-latex-mode 'company-auctex-labels)
  (add-to-list 'company-backends-latex-mode 'company-auctex-bibs)
  (add-to-list 'company-backends-latex-mode '(company-auctex-macros
					      company-auctex-symbols
					      company-auctex-environments))
  (add-to-list 'company-backends-python-mode 'company-anaconda)
  (add-to-list  'company-backends-erc-mode 'company-capf)
#+END_SRC
*** Hooks
#+BEGIN_SRC emacs-lisp :tangle no 
(defun configuration-layer/package-usedp (&rest args) t)
 (spacemacs|add-company-hook erc-mode)
 (spacemacs|add-company-hook ielm-mode)
 (spacemacs|add-company-hook sh-mode)
 (spacemacs|add-company-hook inferior-python-mode)
 (spacemacs|add-company-hook pip-requirements-mode)
 (spacemacs|add-company-hook org-mode)
 (spacemacs|add-company-hook emacs-lisp-mode)
 (spacemacs|add-company-hook python-mode)
 (spacemacs|add-company-hook c++-mode)
 (spacemacs|add-company-hook latex-mode)
 (spacemacs|add-company-hook eshell-mode)
 #+END_SRC

 #+RESULTS:

** Yasnippet 
#+BEGIN_SRC emacs-lisp 
  (use-package yasnippet-snippets)
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
    (add-to-list 'yas-snippet-dirs tuhdo-snippets-directory )
    (add-to-list 'yas-snippet-dirs elib-snippets-directory )
    (add-to-list 'yas-snippet-dirs (concat elib-external-lisp-scimax-dir "snippets/"))
    (yas-load-directory elib-snippets-directory)
    (yas-load-directory tuhdo-snippets-directory)
    (yas-global-mode t)
    (add-hook 'org-mode-hook #'elib-org-latex-yas))
  (use-package helm-c-yasnippet
       :ensure t)
#+END_SRC

* Checkers 
** Flycheck
#+BEGIN_SRC emacs-lisp 
(use-package flycheck
  :diminish 
  :config 
  (global-flycheck-mode)
  (add-hook 'org-src-mode-hook 'elib-disable-flycheck-if-in-org-src-emacs-lisp))
(use-package flycheck-pos-tip
  :config
  (flycheck-pos-tip-mode))
#+END_SRC
** Flyspell 
#+BEGIN_SRC emacs-lisp 
(use-package flyspell 
  :init
  (add-hook 'tex-mode-hook (function (lambda () (setq ispell-parser 'tex)))))
#+END_SRC
* Text editing 
** Comment do what i mean
#+BEGIN_SRC emacs-lisp 
(use-package comment-dwim-2)
#+END_SRC

** Move what I mean 
#+BEGIN_SRC emacs-lisp
(use-package mwim 
    )
#+END_SRC
** Hungry delete
  #+BEGIN_SRC emacs-lisp 
(use-package hungry-delete
  :config 
  (global-hungry-delete-mode))
  #+END_SRC
** Undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree 
  :diminish undo-tree-mode
  :config 
  (global-undo-tree-mode))
#+END_SRC

#+RESULTS:
: t
* Programming 
** LaTeX
#+BEGIN_SRC emacs-lisp
(use-package auctex-latexmk
     :ensure t
     :config
     (auctex-latexmk-setup))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
   (use-package anaconda-mode
     :ensure t
     :init
     (add-hook 'python-mode-hook 'anaconda-mode)
     :config
     (spacemacs|hide-lighter anaconda-mode)
     (anaconda-eldoc-mode))
(use-package helm-pydoc :ensure t)
   (use-package pip-requirements :ensure t)
   (use-package python
     :ensure t)
   (use-package pytest
     :ensure t)
   (use-package pyvenv
     :ensure t)
#+END_SRC

** Rainbow delimiters 
#+BEGIN_SRC emacs-lisp 
(use-package rainbow-delimiters
  :hook ((prog-mode . rainbow-delimiters-mode)
	 (org-mode . rainbow-delimiters-mode)
	 ))
#+END_SRC
** Lisp 
*** Slime/Common lisp
#+BEGIN_SRC emacs-lisp
(use-package slime)
#+END_SRC

*** Slime nav
 #+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
    :hook ((emacs-lisp-mode . elisp-slime-nav-mode)
           (org-mode . elisp-slime-nav-mode)
           (lisp-interaction-mode . elisp-slime-nav-mode))
    :diminish)
 #+END_SRC
*** Eldocs 
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :diminish
  :hook ((emacs-lisp-mode . eldoc-mode)
         (org-mode . eldoc-mode)
         (lisp-interaction-mode . eldoc-mode)))
#+END_SRC
* Windows 
Ace window for moving between windows 
#+BEGIN_SRC emacs-lisp
(use-package ace-window)
#+END_SRC

Windmove 
#+BEGIN_SRC emacs-lisp
(use-package windmove)
#+END_SRC

Winner mode 
#+BEGIN_SRC emacs-lisp
(use-package winner
  :config
  (winner-mode t))
#+END_SRC

#+RESULTS:
: t
* EAF
#+BEGIN_SRC emacs-lisp
(use-package eaf
:disabled t
:load-path "/home/einarelen/.emacs.d/external/lisp/emacs-application-framework/"
:config 
)
#+END_SRC

#+RESULTS:
* Eshell and Equake 

  #+BEGIN_SRC emacs-lisp
(require 'eshell)
(require 'esh-module)
(require 'em-smart)
(add-to-list 'eshell-modules-list 'eshell-tramp)
(use-package equake
  :config  ; some examples of optional settings follow:
  (global-set-key (kbd "C-x C-c") 'equake-check-if-in-equake-frame-before-closing) ; prevent accidental frame-closure
  (setq equake-size-width 0.99) ; set width a bit less than full-screen (prevent 'overflow' on multi-monitor)
  (setq equake-size-height 0.4)
  (setq equake-use-xdotool-probe t)
  ;; set distinct face for Equake: white foreground with dark blue background,
  ;; and different font
  ;;(set-face-attribute 'equake-buffer-face 'nil :inherit 'default :family "DejaVu Sans Mono" :background "#000022" :foreground "white")
  (setq equake-opacity-active 100) (setq equake-opacity-inactive 100))
  #+END_SRC

  #+RESULTS:
  : t

* Server

#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
        (message "Starting a server...")
        (server-start))
#+END_SRC

#+RESULTS:

* Visuals 
** Text 
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
(use-package visual-fill-column :ensure t :config (global-visual-fill-column-mode -1))
(global-display-line-numbers-mode t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Themes 
*** Helm
 A package to choose from installed themes with helm
  #+BEGIN_SRC emacs-lisp 
 (use-package helm-themes
   :commands helm-themes
   :bind (("<f10>" . helm-themes))
   :config
  
   )
  #+END_SRC

  #+RESULTS:
  : helm-themes

*** Spaceline and all-the-icons
 Spacemacs, spaceline, and all-the-icons. 
 #+BEGIN_SRC emacs-lisp 
(use-package spaceline
  :disabled t
  :config


  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
  (spaceline-helm-mode t)
  (spaceline-info-mode t))
(use-package all-the-icons)
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
(use-package spaceline-all-the-icons
  :disabled t
  :config          
  ;; (spaceline-all-the-icons-theme)
  )

 #+END_SRC

 #+RESULTS:
 : t

*** Doom 
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
:hook (after-init . doom-modeline-mode)
)
#+END_SRC

    

** Spaceline and frames
This sets up a small thing in the mode line so that we can see what
frame we are in.

#+BEGIN_SRC emacs-lisp :tangle no 

(spaceline-define-segment frame-workflow
     "The current frame-workflow subject."
     (when-let ((subject (frame-workflow--frame-subject-name)))
       (format "%s %s"
	       (propertize (all-the-icons-octicon "browser" :v-adjust 0)
			   'face `(:family 
				   ,(all-the-icons-octicon-family)
				   :height ,(spaceline-all-the-icons--height 1.1)
				   :inherit))
	       (propertize subject 'face '(:height 0.8 :inherit))))
     :tight t
     :when (bound-and-true-p
	    frame-workflow-mode))
   (spaceline-all-the-icons-theme 'frame-workflow)
(spaceline-define-segment evil-state
  "The current evil state.  Requires `evil-mode' to be enabled."
  (when (bound-and-true-p evil-local-mode)
    (s-trim (evil-state-property evil-state :tag t))))

 #+END_SRC 

 #+RESULTS:
 | %e | (:eval (spaceline-ml-all-the-icons)) |
  
*** Initial Theme

 I like the spacemacs themes. 
 #+BEGIN_SRC emacs-lisp 

;; Also neat
(use-package dracula-theme)

(use-package spacemacs-common
  :ensure spacemacs-theme 
  :config 
  
)


;(load-theme 'spacemacs-light t)
(load-theme 'dracula t)
 #+END_SRC

 #+RESULTS:

* Variables 
** Defaults 
#+BEGIN_SRC emacs-lisp 
(setq c-basic-indent 2)
(setq tab-width 4)
(setq indent-tabs-mode nil)
(setq-default display-line-numbers 'visual
              display-line-numbers-widen t
              ;; this is the default
              display-line-numbers-current-absolute t)
#+END_SRC

#+RESULTS:

** Org-mode 
*** Load languages 
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
   'org-babel-load-languages
   (append oer-reveal-publish-babel-languages 
    '((C . t)
      (lisp . t)
     (emacs-lisp . t)
     (latex . t)
     (gnuplot . t)
     (python . t)
     (lua . t)
     (haskell . t)
     (awk . t)
     (calc . t)
     (shell . t)
     (latex . t)
     (jupyter . t))))
#+END_SRC

#+RESULTS:

*** Variables
 #+BEGIN_SRC emacs-lisp 
 ;; Important for emails, we dont want mathjax.
(setq org-html-with-latex elib-org-html-with-latex-use)
   (setq org-return-follows-link t)
   (setq org-latex-remove-logfiles t)
   (setq org-src-window-setup 'current-window)
   (setq org-src-fontify-natively t)
   (setq org-src-tab-acts-natively t)
   (setq org-src-preserve-indentation t)
   (setq org-use-speed-commands nil)
   (setq org-speed-commands-user
	 '(("i" . elib-org-tree-to-indirect-buffer-and-move)))
   (setq org-id-locations-file
	 (concat elib-user-org-directory "org-brain-id-locations"))
   (setq org-id-track-globally t)
   (setq org-preview-latex-default-process 'imagemagick) ;; Alternative is 'dvipng
   (setq org-startup-with-latex-preview nil)
   (setq reftex-default-bibliography elib-default-bibtex-file)

   (setq org-ref-bibliography-notes elib-default-bibtex-notes-file
    org-ref-default-bibliography `(,elib-default-bibtex-file)
    org-ref-pdf-directory elib-default-bibtex-pdf-dir
    org-ref-notes-directory elib-org-ref-bibtex-notes-dir
    org-ref-notes-function ' org-ref-notes-function-many-files)
   ;; Change to this if many files doesn't work
   ;; (setq org-ref-notes-function
   ;;     (lambda (thekey)
   ;;   (let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
   ;;     (bibtex-completion-edit-notes
   ;;      (list (car (org-ref-get-bibtex-key-and-file thekey)))))))
   (setq org-latex-prefer-user-labels t)
   (setq org-ref-default-ref-type "autoref")
   (setq bibtex-completion-bibliography elib-default-bibtex-file
	 bibtex-completion-library-path elib-default-bibtex-pdf-dir
	 bibtex-completion-notes-path elib-default-bibtex-notes-file)
   (setq elib-org-latex-use-minted nil)
   (setq org-preview-latex-image-directory elib-preview-latex-dir)
   (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.0))
   (when elib-org-latex-use-minted
     (add-to-list-multi 'org-latex-minted-langs
			(list
			 '(C++ "c++")
			 '(c++ "c++")
			 '(C "c++")
			 '(shell "bash")
			 '(sh "bash")
			 '(python "python")
			 '(ruby "ruby")))
     (setq org-latex-minted-options
	   '(("frame" "lines")
	     ("fontsize" "\\scriptsize")
	     ("linenos" "")
	     ("breaklines" "true")
	     ("breakanywhere" "true")))
     ;; tell org to use listings
     (setq org-latex-listings 'minted)
     ;; you must include the listings package
     ;; Include shell-espace so we can use minted...
     (setq org-latex-pdf-process
	   '("latexmk -pdflatex='pdflatex -shell-escape -bibtex -interaction nonstopmode -output-directory %o'  -pdf -f %f"
	     ;; "latexmk -shell-escape -bibtex -interaction nonstopmode -output-directory %o %f"
	     ;; "latexmk -shell-escape -bibtex -interaction nonstopmode -output-directory %o %f"
	     ))

     (add-to-list-multi 'org-latex-packages-alist
			(list '("altindent,wide" "eetex")
			      '("newfloat" "minted")
			      '("" "tikz")
			      '("" "parskip")
			      ;; '("" "listingsutf8")
			      '("" "color"))))

   ;; From oer-reveal-publish-setq-refaults
   (setq
    table-html-table-attribute (concat table-html-table-attribute " class=\"emacs-table\"")
    table-html-th-rows 1
    org-html-doctype oer-reveal-publish-html-doctype ;; html5
    ;; org-html-table-default-attributes nil
    org-html-postamble oer-reveal-publish-html-postamble
    org-descriptive-links t
    oer-reveal-publish-descriptive-links org-descriptive-links
    oer-reveal-latex-figure-float oer-reveal-publish-figure-float ;; htp -> H
    org-re-reveal-script-files oer-reveal-script-files
    org-re-reveal--href-fragment-prefix org-re-reveal--slide-id-prefix
    org-re-reveal-body-attrs
    "prefix=\"dc: http://purl.org/dc/terms/ cc: http://creativecommons.org/ns#\""
    org-latex-pdf-process oer-reveal-publish-pdf-process ;; Use latexmk
    ;; Add packages that need to be at the beginning of
    ;; org-latex-default-packages-alist.
    org-latex-default-packages-alist
    (append oer-reveal-publish-latex-packages
	    org-latex-default-packages-alist))
   (add-to-list 'org-entities-user '("textbackslash" "\\textbackslash{}" nil "\\" "\\" "\\" "\\"))

   ;; (setq org-re-reveal-root "https://reveal.js")
   (setq org-re-reveal-transition "fade")
   (setq org-re-reveal-theme "beige")
   (setq org-re-reveal-history t) ; nil
   (setq org-re-reveal-progress t)
   (setq org-re-reveal-center t)
   (setq org-re-reveal-rolling-links nil)
   (setq org-re-reveal-slide-number "c")
   (setq org-re-reveal-single-file t)
   (setq org-confirm-babel-evaluate nil)
   (setq org-brain-path elib-org-brain-dir)
   (setq org-brain-visualize-default-choices 'all)
   (setq org-brain-title-max-length 24)
   ;;; PDF-tools
   (setq org-file-apps
       '(("\\.docx\\'" . emacs)
	 ("\\.mm\\'" . default)
	 ("\\.x?html?\\'" . default)
	 ("\\.pdf\\'" . emacs)
	 (auto-mode . emacs)))
 #+END_SRC

 #+RESULTS:
 : t

** Jupyter / Org 
#+BEGIN_SRC emacs-lisp
(setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-c++" "jupyter-c"))
(setq org-babel-default-header-args:jupyter-python '((:async . "no")
                                                     (:session . "jup")))
(setq org-babel-default-header-args:jupyter '((:async . "no")
					      (:kernel . "python")
                                              (:session . "jup"))) 
#+END_SRC

** PDF Tools
 #+BEGIN_SRC emacs-lisp 
(setq org-file-apps
    '(("\\.docx\\'" . emacs)
      ("\\.mm\\'" . default)
      ("\\.x?html?\\'" . default)
      ("\\.pdf\\'" . emacs)
      (auto-mode . emacs)))
(setq-default pdf-view-display-size 'fit-page)
(setq  pdf-annot-activate-created-annotations t)
(setq pdf-view-resize-factor 1.1)
 #+END_SRC

** Latex
#+BEGIN_SRC emacs-lisp
(setq auctex-latexmk-inherit-TeX-PDF-mode t)
#+END_SRC

#+RESULTS:
: t

** Which Key 
#+BEGIN_SRC emacs-lisp 
(setq which-key-sort-order 'which-key-key-order-alpha)
(setq which-key-idle-delay 0.001)
#+END_SRC
** Ace Window 
#+BEGIN_SRC emacs-lisp
(setq aw-always-dispatch t)
(setq aw-scope 'frame)
(setq aw-ignore-current t)
#+END_SRC
** Projectile 
#+BEGIN_SRC emacs-lisp
(setq projectile-enable-caching t)
(setq projectile-completion-system 'helm)
(setq projectile-switch-project-action 'elib-do-projectile-frame-and-helm)
#+END_SRC

#+RESULTS:
: elib-do-projectile-frame-and-helm
** Smartparens 
#+BEGIN_SRC emacs-lisp
;; Silences warnings...
(setq sp-message-width nil)
(setq sp-show-pair-from-inside t)
#+END_SRC

#+RESULTS:
: t
** Undo tree 
#+BEGIN_SRC emacs-lisp
(setq undo-tree-visualizer-diff t)
#+END_SRC
** Frames 
#+BEGIN_SRC emacs-lisp
(setq frame-workflow-directory-frame-action (lambda () (dired default-directory)))
(setq projectile-switch-project-action #'elib-do-projectile-frame-and-helm)
(setq initial-buffer-choice elib-init-configuration-org)
(defvar helm-source-frame-not-found
  (helm-build-dummy-source
      "Create frame"
    :action (helm-make-actions
             "Create frame"
             #'frame-workflow-make-frame)))
(defun helm-frame-workflow ()
  "Helm command for frame-workflow."
  (interactive)
  (helm :sources '(helm-frame-workflow-source-frames
                   helm-frame-workflow-source-no-subject-frames
                   helm-frame-workflow-source-subjects
		   helm-source-frame-not-found)
        :buffer "*helm frame-workflow*"
        :prompt "frame-workflow: "))
;; Weird bug... 
(setq clipmon--autoinsert nil)
#+END_SRC
** Mail
*** Mu4e
 #+BEGIN_SRC emacs-lisp
(setq mail-user-agent 'mu4e-user-agent)
(setq gnus-dired-mail-mode 'mu4e-user-agent)
(setq mu4e-mu-binary (potential-load-paths '("~/.local/bin/mu" "/usr/bin/mu")))
(setq mu4e-headers-fields 
      '((:human-date . 12)
	(:flags . 6)
	(:mailing-list . 10)
	(:from . 22)
	(:to . 14)
	(:subject)))
(setq mu4e-maildir "~/.local/Maildir"
      mu4e-use-fancy-chars t
      mu4e-attachment-dir elib-mail-attachments-dir
      mu4e-view-show-images t
      mu4e-get-mail-command elib-mail-get-command
      mu4e-update-interval 360)
(setq elib-mu4e-account-alist
  (list
   elib-mail-gmail
   elib-mail-lu
   elib-mail-jol))
(setq  message-send-mail-function 'message-send-mail-with-sendmail
       sendmail-program (executable-find "msmtp"))
(setq mu4e-view-prefer-html t)
;; Needed with mbsync, apparently
(setq mu4e-change-filenames-when-moving t)
(setq mu4e-html2text-command 'mu4e-shr2text)
(setq shr-color-visible-luminance-min 80)
(setq mu4e-view-auto-mark-as-read nil)
(setq mu4e-update-interval 120)
(elib-loop-and-set-vars (cdr elib-mail-gmail))
;; Borrowed from http://ionrock.org/emacs-email-and-mu.html
;; Choose account label to feed msmtp -a option based on From header
;; in Message buffer; This function must be added to
;; message-send-mail-hook for on-the-fly change of From address before
;; sending message since message-send-mail-hook is processed right
;; before sending message.
(setq message-sendmail-envelope-from 'header)
(setq helm-mu-contacts-after "01-Jan-2017 00:00:00")
(setq helm-source-mu-contacts
      (helm-build-in-buffer-source "Search contacts with mu"
	:data #'helm-mu-contacts-init
	:filtered-candidate-transformer #'helm-mu-contacts-transformer
	:action '(("Copy contacts to clipboard." . helm-mu-action-copy-contacts-to-clipboard)
		  ("Compose email addressed to selected contacts." . helm-mu-compose-mail)
		  ("Get the emails from/to the selected contacts." . helm-mu-action-get-contact-emails)
		  ("Insert contacts at point." . helm-mu-action-insert-contacts))))
 #+END_SRC


*** Org msg
#+BEGIN_SRC emacs-lisp
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil"
      org-msg-startup "hidestars indent inlineimages"
      org-msg-greeting-fmt "\nHi *%s*,\n\n"
      org-msg-greeting-name-limit 3
      org-msg-enforce-css elib-mail-css
      org-html-html5-fancy t)
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (defvar auto-completion-enable-snippets-in-popup t
    "If non nil show snippets in the auto-completion popup.")
  (defvar auto-completion-enable-help-tooltip t
    "If non nil the docstring appears in a tooltip.
  If set to `manual', help tooltip appears only when invoked
  manually.")
;(setq-default company-backends spacemacs-default-company-backends)
  (setq company-idle-delay 0.2
    company-minimum-prefix-length 2
    company-require-match nil
    company-dabbrev-ignore-case nil
    company-dabbrev-downcase nil)
  (setq company-frontends (delq 'company-echo-metadata-frontend company-frontends))
  (setq company-quickhelp-delay company-idle-delay)
#+END_SRC
** Yasnippet 
#+BEGIN_SRC emacs-lisp
(setq helm-yas-space-match-any-greedy t)
#+END_SRC

* Todo

#+BEGIN_SRC emacs-lisp :tangle no
(use-package unfill)
#+END_SRC
