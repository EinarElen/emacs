#+AUTHOR: Einar Elén
#+EMAIL: einar.elen@gmail.com
#+OPTIONS: toc:3 html5-fancy org-html-preamble:nil
#+HTML_DOCTYPE_HTML5: t
#+PROPERTY: header-args :tangle yes
#+STARTUP: noinlineimages 
* Emacs Setup
** Definitions and Variables
*** Handy lisp functions and macros                                :ignore:
#+BEGIN_SRC emacs-lisp 
(eval-when-compile
  (defun potential-load-paths (list)
    (let ((value))
      (dolist (elt list value)
        (when (and (not value) (file-exists-p elt))
          (setq value (expand-file-name elt))))
      value)))
(defmacro alist-get-equal (key alist &optional default
                               remove)
  "A call to `alist-get' with testfn set to `equal'"
  `(alist-get ,key ,alist ,default ,remove 'equal))


(defmacro alist-get-equal-simple (key alist)
  "A call to `alist-get' with default and remove set to
nil and testfn set to `equal'

In reality, a call to `alist-get-equal' with default and
remove set to nil."
  `(alist-get-equal ,key ,alist nil nil))

(defmacro add-to-list-multi (lst elts &optional append compare-fn)
  "Call `add-to-list' for each element in ELTS to LST."
  `(dolist (x ,elts)
     (add-to-list ,lst x ,append ,compare-fn)))

#+END_SRC
*** Definitions                                                   :ignore:
These exist because the emacs byte-compiler cannot be sure
that these variables and functions are actually defined. As
we know that they are, we can tell it to relax!

You should in general never need to care about this
section. We also define a customization group called `elib:'
that can be used for any customizations we create later.

#+BEGIN_SRC emacs-lisp 
(eval-when-compile
    (defvar mac-command-modifier)
  (defvar flycheck-highlighting-mode)
  (defvar flycheck-check-syntax-automatically)
  (defvar TeX-view-program-selection)
  (defvar elib:helm-tex-alist)
  (defvar TeX-view-program-list)
  (defvar with-editor-emacsclient-executable)
  (defvar compilation-read-command)
  (setq ad-redefinition-action 'accept))
#+END_SRC
*** Customization Groups
Customization groups makes making changes simpler and
exploring the configurations and definitions that are made
in this file. If you want to start exploring, try calling
[[elisp:(find-function 'customize-group)][`customize-group']] and looking into the base group `elib:'.

#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (defgroup elib: nil
    "Overarching customization group for any custom groups
  created in `config-file-file-name'."
    :tag "*elib*")

  (defgroup elib:file-paths nil
    "Customization group for file-paths."
    :group 'elib:
    :tag "elib:file-paths")
  (defgroup elib:calendar nil
    "Customization group for `calfw' and `org-gcal'."
    :tag "elib:calendar"
    :group 'elib:)
  (defgroup elib:org nil
    "Customization group for `org-mode'."
    :tag "elib:org"
    :group 'elib:)

  (defgroup elib:helm-tex nil
    "Customization group for the\
  `elib:helm-tex-choose-program' function."
    :tag "elib:helm-TeX"
    :group 'elib:)
  (defgroup elib:helm-tex-pdf-tools nil
    "Customization group for the PDF-tools reader\
 for the `elib:helm-tex'-group."
    :tag "elib:'helm-TeX-PDF-tools"
    :group 'elib:helm-tex)
  (defgroup elib:helm-tex-okular nil
    "Customization group for the Okular reader for\
 the `elib:helm-tex'-group."
    :tag "elib:helm-TeX-Okular"
    :group 'elib:helm-tex)
  (defgroup elib:helm-tex-evince nil
    "Customization group for the Evince reader for\
 the `elib:helm-tex'-group."
    :tag "elib:helm-TeX-Evince"
    :group 'elib:helm-tex)
  )
#+END_SRC
*** User variables
**** Personal Information                                         :Update:

Here we set all important personal details.
- Your name in [[elisp:(find-variable 'user-full-name)][`user-full-name']]
- Your primary email address in [[elisp:(find-variable 'user-mail-address)][`user-mail-address']]
- Any additional email addresses in [[elisp:(find-variable
'user-mail-address-list)][`user-mail-address-list']]

#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (setq user-full-name "Einar Elén"
        user-mail-address "einar.elen@gmail.com")
  (defcustom user-mail-address-list `(,user-mail-address,
                                      "info-ordf@luna.lu.se",
                                      "nat13eel@student.lu.se")
    "A list of the `user-mail-address' and any additional
  email addresses of the user."
    :group 'elib:
    :type '(repeat string)))
#+END_SRC
**** Location of Executables                                      :ignore:
Since we want to be able to use the same configuration
regardless of where programs might be stored on our
computer, we define some variables for storing the location
of these programs. They are set automatically using the
handy [[elisp:(find-function 'executable-find)][`executable-find']] function.
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (setq
   with-editor-emacsclient-executable (executable-find
                                       "emacsclient")
   magit-git-executable (executable-find "git")
   cide--rdm-executable (executable-find "rdm")
   irony-cmake-executable (executable-find "cmake")
   company-cmake-executable irony-cmake-executable
   cmake-mode-cmake-executable company-cmake-executable

   company-clang-executable (executable-find "clang")
   flycheck-c/c++-clang-executable company-clang-executable

   flycheck-c/c++-gcc-executable (executable-find "gcc")
   clang-format-executable (executable-find "clang-format")
   company-gtags-executable (or (executable-find "global")
                                (executable-find "gtags"))))
 #+END_SRC
**** Location of Files                                    :probablyignore:
There are some files that it is useful to have a variable
for. If you use some other
- Location of some extra snippets for the yasnippet package
  from Tuhdo in  [[elisp:(find-variable 'tuhdo-snippets-directory)][`tuhdo-snippets-directory']]. This is used
  later in [[*Yasnippet][Yasnippet]]
- The location of the configuration file (i.e. this file) in
  [[elisp:(find-variable 'config-file-file-name)][`config-file-file-name']] (great name choice right?)
- In [[*Capture][Capture]], we define some ways to capture quick thoughts
  and quotes. I use the two separate files for todo:s and
  quotes, [[elisp:(find-variable 'user-org-quotes-file-name)][`user-org-quotes-file-name']] and
  [[elisp:(find-variable 'user-org-todo-file-name)][`user-org-todo-file-name']]
- Later in [[*Abbrev][Abbrev]] we define some spell-checking tools. We
  have a big file of common spelling oopsies (e.g. owrk
  instead of work). The location of this file is defined in
  [[elisp:(find-variable 'abbrev-location)][`abbrev-location']]
- Folder where all [[elisp:(find-function 'org-gcal)][`org-gcal']]-calendars will be stored in
  [[elisp:(find-variable 'org-gcal-calendar-location)][`org-gcal-calendar-location']] . I use three calendars and
  their individual files have a variable each, all of which
  can be found in `org-gcal-calendar-file-name-list'. These
  settings are used in [[*Calendar][Calendar]]
  - My main calendar in [[elisp:(find-variable 'org-gcal-calendar-main-file-name)][`org-gcal-calendar-main-file-name']]
  - My information committee chairperson calendar in
    [[elisp:(find-variable 'org-gcal-calendar-info-ordf-file-name)][`org-gcal-calendar-info-ordf-file-name']]
  - My student calendar in [[elisp:(find-variable 'org-gcal-calendar-lu-file-name)][`org-gcal-calendar-lu-file-name']]
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (defcustom tuhdo-snippets-directory
      (expand-file-name
       (concat user-emacs-directory
	       "tuhdosnippets"))
      "Location of extra yasnippet files from Tuhdo."
      :type 'string
      :group 'elib:file-paths)

    (defcustom config-file-file-name
      (expand-file-name
       (concat
	user-emacs-directory
	"configuration.org"))
      "The filename of the user configuration file."
      :type 'string
      :group 'elib:file-paths
      :group 'elib:org)


    (defcustom org-gcal-calendar-location
      (expand-file-name
       "~/nextcloud/org/cal/")
      "The directory where calendar files for `org-gcal' are
    stored."
      :group 'elib:calendar
      :group 'elib:file-paths
      :group 'elib:org
      :type 'string)
    (defcustom org-gcal-calendar-main-file-name
      (concat org-gcal-calendar-location "gmail.org")
      "Filename of the main calendar file."
      :type 'string
      :group 'elib:calendar
      :group 'elib:file-paths
      :group 'elib:org)
    (defcustom org-gcal-calendar-info-ordf-file-name
      (concat org-gcal-calendar-location "info-ordf.org")
      "Filename of the info-ordf calendar file."
      :type 'string
      :group 'elib:calendar
      :group 'elib:file-paths
      :group 'elib:org)
    (defcustom org-gcal-calendar-lu-file-name
      (concat org-gcal-calendar-location "lu.org")
      "Filename of my student account calendar file."
      :type 'string
      :group 'elib:calendar
      :group 'elib:file-paths
      :group 'elib:org)


    (defcustom org-gcal-calendar-file-name-list
      `(,org-gcal-calendar-main-file-name
	,org-gcal-calendar-info-ordf-file-name
	,org-gcal-calendar-lu-file-name)
      "List of all calendar file-names."
      :type '(repeat string)
      :group 'elib:calendar
      :group 'elib:file-paths
      :group 'elib:org)

    (defcustom user-org-todo-file-name
      (expand-file-name (concat user-emacs-directory
				"../todo.org"))
      "The "
      :group 'elib:org
      :group 'elib:file-paths
      )
    (defcustom user-org-quotes-file-name
      (expand-file-name
       (concat user-emacs-directory "../citatsamling.org"))
      ""
      :group 'elib:org
      :group 'elib:file-paths
      )
    (defcustom abbrev-location (expand-file-name ".abbrev_defs" user-emacs-directory)
      ""
      :group 'abbrev
      :group 'elib:file-paths
      )
    )
#+END_SRC


**** Load Paths                                           :probablyignore:

***** TODO Create the script to install all of the packages
Most programs are installed using emacs package manager and
we do not need to tell it anything about where to find the
lisp-code for the package. Some packages might be installed
by your operating system (in my case, asymptote) or manually
(in my case, mu4e). If you use these packages you might need
to install them specially. I have written a script for
installing these packages which can check out if you want in
[[elisp:(find-variable 'load-path-script-location)][`load-path-script-location']].

The load-paths are defined using the handy little macro
[[elisp:(find-function 'potential-load-paths)][`potential-load-paths']] which takes a list of potential paths
and returns the full file-name of the first one that exists
on the file-system.

The packages and their load-paths are:
- [[*Mu4e][Mu4e]] is an email-reader in emacs. I compile mu4e from
  source and have to add the load-path manually. The
  load-path variable is [[elisp:(find-variable 'elib:mu4e-load-path)][`elib:mu4e-load-path']].
- In [[*Calendar][Calendar]], I use the package [[elisp:(find-variable 'org-gcal)][`org-gcal']] to synchronise
  google calendar with my org-mode calendar files. Sadly,
  there is a bug which prevents you from using more than one
  calendar. There is a solution which someone has tried to
  get into the main package but at the moment it isn't
  there. I therefore use a patched version of the package
  which I have to install manually. The load-path variable
  is [[elisp:(find-variable 'elib:org-gcal-load-path)][`elib:org-gcal-load-path']].
- [[*Rtags][Rtags]] is an incredibly powerful tool for handling code. I
  used to install this manually but since Fedora 28 (I
  think?) there is an operating system which provides
  it. The load-path is defined in [[elisp:(find-variable 'elib:rtags-load-path)][`elib:rtags-load-path']].
- I often use the programming language [[https://en.wikipedia.org/wiki/Asymptote_(vector_graphics_language)][Asymptote]] to generate
  vector graphics for graphs. It comes with great
  integration into Emacs and is designed to be used with
  [[*LaTeX/AUCTeX][LaTeX]] and I install it together with the other AUCTeX
  features. I install asymptote through my operating system
  package manager and add the load-path for its lisp-code
  using the variable [[elisp:(find-variable 'elib:asymptote-load-path)][`elib:asymptote-load-path']].

#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (defvar load-path-script-location
    (expand-file-name (concat user-emacs-directory "special-packages.el")))
  (defvar elib:org-gcal-load-path (expand-file-name "~/src/org-gcal"))
  (defvar elib:rtags-load-path
    (potential-load-paths
     `("/usr/share/emacs/site-lisp/rtags/rtags.el"
       ,(concat user-emacs-directory
               "../src/rtags/src/"))))
  (defvar elib:mu4e-load-path
    (potential-load-paths
     '("/usr/local/share/emacs/site-lisp/mu4e"
       "/usr/local/share/emacs/site-lisp/mu/mu4e"
       "~/.emacs.d/mu4e")))
  (defvar elib:asymptote-load-path
    (potential-load-paths '("/usr/share/asymptote/"))))
#+END_SRC
**** TeX Viewers                                                  :ignore:
AUCTeX is great but one weird thing about is that it only
allows you to chose one program to use for viewing your pdf:s
you create. I have created a little [[*Helm][Helm]]-program which lets
you switch between viewers.

The function is called [[elisp:(find-function
'elib:helm-tex-choose-program)][`elib:helm-tex-choose-program']]
and in [[*LaTeX/AUCTeX][LaTeX/AUCTeX]] we bind it to "C-c v"
in [[elisp:(find-function 'LaTeX-mode)][`LaTeX-mode']]. I used
this to learn a bit more about the customization features of
emacs so it is definitely more complicated than what is
strictly necessary.


You should not need to modify any of these variables but
feel free to study them and come with suggestions of how to
do it in a more proper way if you like. If you wish to add
some other program as a pdf-reader than the ones listed in
[[elisp:(find-variable 'elib:helm-tex-alist)][`elib:helm-tex-alist']].

You can also customize my settings through the group
`elib:helm-tex'.

#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'helm)
  (eval-after-load "tex"
    '(eval-after-load "helm"
       '(progn
#+END_SRC
***** Evince
Here we define everything necessary for the evince
pdf-reader (i.e. the default pdf-reader for the GNOME
desktop environment).

The variables you can customize in the
`elib:helm-tex-evince'-subgroup are
- [[elisp:(find-variable 'elib:helm-tex-evince-human-readable)][`elib:helm-tex-evince-human-readable']]
- [[elisp:(find-variable 'elib:helm-tex-evince)][`elib:helm-tex-evince']]

#+BEGIN_SRC emacs-lisp


(defcustom elib:helm-tex-evince-human-readable
  "Evince"
  "Human readable name for the Evince PDF viewer."
  :type 'string
  :group 'elib:helm-tex-evince)


(defcustom elib:helm-tex-evince
  `((output-pdf ,elib:helm-tex-evince-human-readable)
    (,elib:helm-tex-evince-human-readable
     TeX-evince-sync-view
     "evince"
     ))
  "Settings for the Evince viewer. Consists of two\
 lists:\n
The first list consisting of the symbol corresponding the
output type defined in `TeX-view-predicate-list' or
`TeX-view-predicate-list-builtin' (PDF) and a human readable
string. The format is for `tex-view-program-selection'
variable.\n

The second list consisting of a human readable string, and
one of the following:

- A string corresponding to a command line to be run as a
process
- An elisp function to execute through `TeX-command-master'
- An elisp function to execute through `TeX-command-master'
and a list of strings with arguments to the function (I
think?).

The format is for `TeX-view-program-list'. The format is
well non-well documented there."
  :type
  '(list
    (list symbol string)
    (list string
          (choice (repeat string)
                  function
                  (list function (repeat
                                  string))
                  (list string
                        (list symbol
                              (choice
                               string
                               (repeat string)
                               ))))
          sexp))
  :group 'elib:helm-tex-evince)

#+END_SRC
***** Okular
Here we define everything necessary for the Okular
pdf-reader (i.e. the default pdf-reader for the KDE desktop
environment).

The variables you can customize in the
`elib:helm-tex-okular'-subgroup are
- [[elisp:(find-variable 'elib:helm-tex-okular-human-readable)][`elib:helm-tex-okular-human-readable']]
- [[elisp:(find-variable 'elib:helm-tex-okular)][`elib:helm-tex-okular']]

#+BEGIN_SRC emacs-lisp
(defcustom elib:helm-tex-okular-human-readable
  "Okular"
  "Human readable name for the Okular PDF viewer."
  :type 'string
  :group 'elib:helm-tex-okular)

(defcustom elib:helm-tex-okular
  `((output-pdf ,elib:helm-tex-okular-human-readable)
    (,elib:helm-tex-okular-human-readable
     ("okular --unique %o"
      (mode-io-correlate "#src:%n%a"))
     "okular"))
  ;; elib:helm-tex-okular
  ;; TeX-view-program-list-builtin
  "Settings for the Okular viewer. Consists of two\
 lists:\n
The first list consisting of the symbol corresponding the
output type defined in `TeX-view-predicate-list' or
`TeX-view-predicate-list-builtin' (PDF) and a human readable
string. The format is for `tex-view-program-selection'
variable.\n

The second list consisting of a human readable string, and
one of the following:

- A string corresponding to a command line to be run as a
process
- An elisp function to execute through `TeX-command-master'
- An elisp function to execute through `TeX-command-master'
and a list of strings with arguments to the function (I
think?).

The format is for `TeX-view-program-list'. The format is
well non-well documented there."
  :type
  '(list
    (list symbol string)
    (list string
          (choice (repeat string)
                  function
                  (list function (repeat
                                  string))
                  (list string
                        (list symbol
                              (choice
                               string
                               (repeat string)
                               ))))
          sexp))
  :group 'elib:helm-tex-okular)



#+END_SRC
***** PDF-Tools
Here we define everything necessary for PDF-tools, the pdf
viewer that we install over in [[*PDF-Handling][PDF-Handling]]. Unlike evince
and okular, pdf-tools is displaying within emacs which means
you have access to all the powers that emacs entails.

The variables you can customize in the
`elib:helm-tex-pdf-tools'-subgroup are
- [[elisp:(find-variable 'elib:helm-tex-pdf-tools-human-readable)][`elib:helm-tex-pdf-tools-human-readable']]
- [[elisp:(find-variable 'elib:helm-tex-pdf-tools)][`elib:helm-tex-pdf-tools']]

#+BEGIN_SRC emacs-lisp 
(defcustom elib:helm-tex-pdf-tools-human-readable
  "PDF-tools"
  "Human readable name for the PDF-tools PDF viewer."
  :type 'string
  :group 'elib:helm-tex-pdf-tools)

(defcustom elib:helm-tex-pdf-tools
  `((output-pdf ,elib:helm-tex-pdf-tools-human-readable)
    (,elib:helm-tex-pdf-tools-human-readable TeX-pdf-tools-sync-view))
  "Settings for the PDF-tools viewer. Consists of two\
 lists:\n
The first list consisting of the symbol corresponding the
output type defined in `TeX-view-predicate-list' or
`TeX-view-predicate-list-builtin' (PDF) and a human readable
string. The format is for `tex-view-program-selection'
variable.\n

The second list consisting of a human readable string, and
one of the following:

- A string corresponding to a command line to be run as a
process
- An elisp function to execute through `TeX-command-master'
- An elisp function to execute through `TeX-command-master'
and a list of strings with arguments to the function (I
think?).

The format is for `TeX-view-program-list'. The format is
well non-well documented there."
  :type
  '(list
    (list symbol string)
    (list string
          (choice (repeat string)
                  function
                  (list function (repeat
                                  string))
                  (list string
                        (list symbol
                              (choice
                               string
                               (repeat string)
                               ))))
          sexp))
  :group 'elib:helm-tex-pdf-tools)
#+END_SRC
***** Helm-TeX-View Selection
#+BEGIN_SRC emacs-lisp
(defcustom elib:helm-tex-sources
  (helm-build-sync-source
      "TeX View Selection"
    :candidates 'elib:helm-tex-candidates
    :action 'elib:helm-tex-set-variables
    :persistent-action 'elib:helm-tex-set-variables)
  "A `helm-sync-source' for TeX View Selection. You
  probably don't need to modify this."
  :type 'helm-source-sync
  :group 'elib:helm-tex)

(defun elib:helm-tex-choose-program ()
  (interactive)
  (helm :sources elib:helm-tex-sources :buffer
	"*elib:helm-tex-view*"))

(defun elib:helm-tex-set-variables (choice)
  (setf (alist-get 'output-pdf TeX-view-program-selection)
	(cdr (cadr (assoc choice
                          elib:helm-tex-alist)))))

(defcustom elib:helm-tex-candidates
  `(,elib:helm-tex-pdf-tools-human-readable
    ,elib:helm-tex-evince-human-readable
    ,elib:helm-tex-okular-human-readable)
  "List of human readable names for all pdf viewers to\
 choose from."
  :type '(repeat string)
  :group 'elib:helm-tex)

(defvar elib:helm-tex-alist
  `((,elib:helm-tex-pdf-tools-human-readable
     . ,elib:helm-tex-pdf-tools)
    (,elib:helm-tex-evince-human-readable
     . ,elib:helm-tex-evince)
    (,elib:helm-tex-okular-human-readable
     . ,elib:helm-tex-okular)))

(defvar elib:helm-tex-program-list
  (let ((value))
    (dolist (x elib:helm-tex-alist value)
      (add-to-list 'value (caddr x)))))

(add-to-list-multi 'TeX-view-program-list
		   elib:helm-tex-program-list)
#+END_SRC
#+BEGIN_SRC emacs-lisp
))))
#+END_SRC
** Improve Basic Emacs Experience
*** Configuration file
Creates a function called [[elisp:(find-function
'configuration-file)][`configuration-file']] which returns
you to this file and binds it to "<f8>" globally. When you
mess around a lot with
#+BEGIN_SRC emacs-lisp
(defun configuration-file()
  (interactive)
  (find-file config-file-file-name))
(global-set-key (kbd "<f8>") 'configuration-file)
#+END_SRC
*** Additional Settings
Disable scroll bar and toolbar, disable the keys that hide
emacs (they are easy to hit on accident which is /really/
annoying). Also, show column and line number of the cursor
in the modeline.
#+BEGIN_SRC emacs-lisp
;; Does not make sense in a terminal
(when (display-graphic-p)
  (scroll-bar-mode -1)
  (tool-bar-mode -1))
;; Way too easy to hit by accident
(global-unset-key (kbd "C-x C-z"))
(global-unset-key (kbd "C-z"))
(setq column-number-mode t
      line-number-mode t)
(global-visual-line-mode t)
(global-hl-line-mode t)
#+END_SRC
Flash the screen rather than making noise when complaining.
#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC
Show a clock!
#+BEGIN_SRC emacs-lisp
(display-time)
#+END_SRC
Always answer yes or no questions with just y or n, yes
or no is annoying to type...
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
Enable syntax highlighting in all modes where it is possible!
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC
If we are using an emacs with native line-numbering, use it!
Otherwise, use nlinum for line-numbering.
#+BEGIN_SRC emacs-lisp
(if (boundp 'display-line-numbers)
    (global-display-line-numbers-mode t)
  (use-package nlinum
    :defer 3
    :preface
    (defun disable-nlinum-mode-hook () (nlinum-mode -1))
    :config
    (global-nlinum-mode t)


    (add-hook 'pdf-view-mode-hook 'disable-nlinum-mode-hook)))
#+END_SRC

Other stuff which may or may not work...
#+BEGIN_SRC emacs-lisp
(use-package tramp
  :config
  (setq tramp-default-method "ssh"))
(setq backup-directory-alist `((".*" . ,temporary-file-directory))
      auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
      backup-by-copying t    ;; Don't delink hard-links
      version-control t      ;; use version numbers on backups
      delete-old-versions t  ;; Automatically delete excess backups
      kept-new-versions 20   ;; how many of the newest versions to keep
      kept-old-versions 5    ;; and how many of the old
      )

(setq ;gc-cons-threshold 100000000
 inhibit-startup-message nil
 history-length t
 history-delete-duplicates t
 version-control t
 x-stretch-cursor nil)
(setq-default
 fill-column 60
 cursor-type 'hbar)
(setq mac-command-modifier 'meta)
#+END_SRC
*** Window Management
		Winner allows you to restore previous window
		configurations and jump around in the window
		configuration history using C-c <left> and C-c <right>
		(the arrow keys).

		Try it out by typing C-x 3, C-x o, C-x b (choose some
		buffer) and then C-c <left> twice to get back! Then try
		C-c <right> once and C-c <left again to return!


		#+BEGIN_SRC emacs-lisp
			(use-package winner
	                  :bind (("C-c <left>" . winner-undo)
				 ("C-c <right>" . winner-redo))
	                  :config
	                  (winner-mode t))
			;; (use-package switch-window
			;;   :defer 2
			;;   :bind (("C-x o" . switch-window)))
			;;
#+END_SRC

**** Clipmon
		Clipmon tries to help emacs synchronize copies and
		pastes between emacs and the rest of your operating
		system.
#+BEGIN_SRC emacs-lisp
(use-package clipmon
  :defer 1
  :config (setq clipmon-autoinsert-timeout nil
		clipmon-autoinsert-sound nil
		clipmon-autoinsert-color nil
		clipmon-transform-suffix nil)
  (clipmon-mode))
			#+END_SRC
****  Windmove
Windmove keybindings allows you to switch between your
windows with shift + arrow keys which can be handy when
you're tired.
			#+BEGIN_SRC emacs-lisp
(use-package windmove
  :after org
  :hook ((org-shiftup-final-hook . windmove-up)
         (org-shiftdown-final-hook . windmove-down)
         (org-shiftleft-final-hook . windmove-left)
         (org-shiftright-final-hook . windmove-right))
  :config
  (windmove-default-keybindings))


		 #+END_SRC
**** Zygospore
		 Zygospore replaces the default kill all other windows with
		 a version which lets you go back if you use it again.
		 #+BEGIN_SRC emacs-lisp

			 (use-package zygospore
	 :bind (("C-x 1" . zygospore-toggle-delete-other-windows)))
		 #+END_SRC
**** Help window management
		 By default help windows don't put you in them
		 immediately, I'd rather they did so they can be killed
		 quickly after reading.
		 #+BEGIN_SRC emacs-lisp
		 (setq help-window-select t)
		 #+END_SRC


*** Hydra
Hydra is a package which allows fancy keyboard bindings. The
		only one which currently exists is C-M-o for
		window 	management.
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :commands (hydra-add-font-lock
	     hydra-default-pre hydra-keyboard-quit
	     hydra--call-interactively-remap-maybe
	     hydra-show-hint hydra-set-transient-map)
  :config
  (hydra-add-font-lock)
  (use-package ace-window)
  (use-package transpose-frame)
  (use-package default-text-scale
    :config
    (default-text-scale-mode t))
  (defhydra hydra-window ()
    "Window management"
    ("a" windmove-left)
    ("s" windmove-down)
    ("d" windmove-right)
    ("w" windmove-up)
    ("3" (lambda ()
	   (interactive)
	   (split-window-right)
	   (windmove-right))
     "Vertical")
    ("2" (lambda ()
	   (interactive)
	   (split-window-below)
	   (windmove-down))
     "Horizontal")
    ("t" transpose-frame "'")
    ("1" delete-other-windows "Delete All" :color blue)
    ("A" ace-window "Ace")
    ("S" ace-swap-window "Swap")
    ("k" ace-delete-window "Kill")
    ("i" ace-delete-other-windows "Ace-max")
    ("b" helm-mini "Buffers")
    ("q" nil "cancel" :color blue)
    ("M-t" text-scale-decrease "Local Text Scale--")
    ("C-t" text-scale-increase
     "Local Text Scale++")
    ("C-f" default-text-scale-increase
     "Global Text Scale++")
    ("M-f" default-text-scale-decrease "Global Text Scale--"))

  (eval-after-load "flyspell"
    (defhydra hydra-spelling (:color blue)
      "
  ^
  ^Spelling^          ^Errors^            ^Checker^
  ^────────^──────────^──────^────────────^───────^───────
  _q_ quit            _<_ previous        _c_ correction
  ^^                  _>_ next            _d_ dictionary
  ^^                  _f_ check           _m_ mode
  ^^                  ^^                  ^^
  "
      ("q" nil)
      ("<" flyspell-correct-previous :color pink)
      (">" flyspell-correct-next :color pink)
      ("c" ispell)
      ("d" ispell-change-dictionary)
      ("f" flyspell-buffer)
      ("m" flyspell-mode))
    )
  :bind (("C-M-o" . hydra-window/body)
         ("C-M-s" . hydra-spelling/body)))


#+END_SRC

*** Mac-specific stuff
Add latex, bash, and much more support because they are in
weird places on Mac OS systems.  Because why wouldn't they
be.
#+BEGIN_SRC emacs-lisp
(if (equal system-type 'darwin)
		(progn (add-to-list 'exec-path "/usr/local/bin/")
					 (add-to-list 'exec-path "/Library/TeX/texbin/pdflatex")
					 (setenv "PATH" (concat "/usr/local/bin:/Library/TeX/texbin/:" (getenv "PATH")))))
#+END_SRC
*** Fonts
#+BEGIN_SRC emacs-lisp
;; (set-frame-font )
;; (find-font )
;; (find-font "Source Code Pro")
;; (member "Source Code Pro" (font-family-list))
;; (set-face-attribute 'default nil
;; 		    :family "Source Code Pro"
;;                     ;; :family "Garamond"
;;                     ;; :family "Computer Modern Typewriter"
;;                     ;; :family "Computer Modern TT"
;;                     ;; :family "DejaVu Sans Mono"
;;                     ;; :family "Inconsolata"
;;                     ;; :family "Terminus"
;; 		    :height 110
;; 		    :weight 'normal
;; 		    :width 'normal)
;; (find-font (describe-font (font-spec :family "Source Code Pro")))
;; (font-family-list)
#+END_SRC
** Looks/Themes
*** Basic Configuration
Adds colouring for variables in programming languages. Sets
the starting buffer to this file.
#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice (concat user-emacs-directory "configuration.org"))

(use-package color-identifiers-mode
  :diminish color-identifiers-mode
  :defer 4
  :config
  (global-color-identifiers-mode t))

#+END_SRC
** Text Editing
Everything in here is essentially from [[http://tuhdo.github.io][tuhdo]] and most of it
is sane by default. Check out the individual packages in his
C/C++ tutorial!
*** Basic
#+BEGIN_SRC emacs-lisp
(setq global-mark-ring-max 5000
      mark-ring-max 5000
      mode-require-final-newline t
      tab-width 2
      kill-ring-max 5000
      kill-whole-line t)
(setq-default indent-tabs-mode nil
	      indent-tabs-mode nil)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
;; Not sure if i want this feature, it causes you to delete
;; things in selection if you start writing much like on
;; most operating systems.
;; (delete-selection-mode t)

;; (add-hook 'sh-mode-hook (lambda ()
;;    k                      (setq
;;                          tab-width
;;                          4)))

;; (use-package simple
;;   :ensure nil
;;   :hook
;;   ((prog-mode)
;;    . auto-fill-mode))

;; (use-package refill :hook ((text-mode org-mode) ))




(use-package whitespace :config (add-hook 'diff-mode-hook (lambda
                                                            () (setq-local whitespace-style '(face tabs tab-mark spaces
                                                                                                   space-mark trailing indentation::space indentation::tab
                                                                                                   newline newline-mark)) (whitespace-mode 1)))

             (global-set-key (kbd "C-c w") 'whitespace-mode))
;;(use-package diff-mode)
;;(add-hook 'prog-mode-hook (lambda () (interactive) (setq
;;                          show-trailing-whitespace 1)))

;; (add-hook 'text-mode-hook 'auto-fill-mode)
 #+END_SRC
*** Keybindings
Disable certain keybindings that are often clicked by
mistake. Add keybinding for compilation (F5) and for
capitalising (M-c).

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-<down-mouse-1>") 'ignore)
(global-set-key (kbd "C-<down-mouse-2>") 'ignore)
(global-set-key (kbd "C-<down-mouse-3>") 'ignore)
(global-set-key (kbd "C-<mouse-1>")
                'ignore)

(global-set-key (kbd "C-<mouse-2>") 'ignore)

(global-set-key (kbd "C-<mouse-3>") 'ignore)

(global-set-key (kbd "M-c") 'capitalize-dwim)

(global-set-key (kbd "<f5>")
                (lambda () (interactive)
                  (setq-local compilation-read-command nil)
                  (call-interactively 'compile)))
#+END_SRC
*** Packages
**** Rainbow Delimiters
Rainbow delimiters highlights braces, brackets, and their
friends.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode-enable))
#+END_SRC
**** Aggressive Indentation
Tries to keep your indentation in check by, being aggressive
about it. It is related to electric-indent-mode but is, more
aggressive.

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode t))
#+END_SRC
**** Which-key
Which-key gives you suggestions if you have started a key
combination but stopped. Real handy.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :hook (after-init . which-key-mode))
#+END_SRC
**** Volatile Highlights
Briefly highlights changes to the buffer for things like
pasting.
#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :diminish volatile-highlights-mode
  :config
  (volatile-highlights-mode t))
#+END_SRC
**** Dtrt-Indent
Guess indentation for many newly opened files based on what
is already in them.
#+BEGIN_SRC emacs-lisp
(use-package dtrt-indent
  :defer 2
  :config
  (dtrt-indent-mode t)
  (setq dtrt-indent-verbosity 0))
#+END_SRC
**** Whitespace Butler
Whitespace butler kills useless whitespace when you aren't
doing anything else.
#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :hook ((prog-mode org-mode text-mode fundamental-mode) . ws-butler-mode)
  :diminish ws-butler-mode)
  #+END_SRC
**** Undo Tree
Makes undoing really fancy with a tree. Try it with C-x u.
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :bind (("C-x u" . undo-tree-visualize))
  :config
  (global-undo-tree-mode)
  (setq undo-tree-visualizer-timestamps nil
	undo-tree-visualizer-diff t))
#+END_SRC
**** Smartparens
Smartparens makes working with pairs of things such as
parentheses simple. It keeps you from messing them up which
is neat.
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :defer 2
  :commands sp-pair
  :config
  (require 'smartparens-config)
  (sp-pair "\\[" "\\]")
  (setq ;; sp-base-key-bindings 'paredit
   sp-autoskip-closing-pair 'always
   sp-hybrid-kill-entire-symbol nil)
  (smartparens-strict-mode)
  ;; (sp-use-paredit-bindings)
  (smartparens-global-mode t)
  :bind (:map smartparens-mode-map (("M-<down>" . nil)
				    ("M-<up>" . nil))))
#+END_SRC
**** Comment-dwim-2
Lets you comment out stuff in more cleaver ways than
default. Dwim stands for do what i mean.
#+BEGIN_SRC emacs-lisp
(use-package comment-dwim-2
  :bind (("M-;" . comment-dwim-2)))
#+END_SRC
**** Anzu
Anzu makes the regular query and replace function much more
useful.
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :diminish anzu-mode
  :config
  (global-anzu-mode t)
  :bind (("M-%" . anzu-query-replace)
	 ("C-M-%" . anzu-query-replace-regexp)))
#+END_SRC
**** Iedit
This is really cool. Mark a section and edit all occurrences
of the section.
#+BEGIN_SRC emacs-lisp
(use-package iedit
  :config
  (setq iedit-toggle-key-default nil)
  :bind (("C-M-;" . iedit-mode)))
#+END_SRC
**** Customized Functions (Mainly From Prelude)
#+BEGIN_SRC emacs-lisp
(defun prelude-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line. Move
  point to the first non-whitespace character on this line. If
  point is already there, move to the beginning of the
  line. Effectively toggle between the first non-whitespace
  character and the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first. If
point reaches the beginning or end of the buffer, stop
there."


  (interactive "^p")
  (setq arg (or arg 1))
  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "C-a") 'prelude-move-beginning-of-line)
(defadvice kill-ring-save (before slick-copy activate compile)
  "When called interactively with no active region, copy a
single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (message "Copied line")
     (list (line-beginning-position)
           (line-beginning-position 2)))))

(defadvice kill-region (before slick-cut activate compile)
  "When called interactively with no active region, kill a
  single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))
;; kill a line, including whitespace characters until next non-whitespace character
;; of next line
(defadvice kill-line (before check-position activate)
  (if (member major-mode
              '(emacs-lisp-mode scheme-mode lisp-mode
                                c-mode c++-mode objc-mode
                                latex-mode plain-tex-mode))
      (if (and (eolp) (not (bolp)))
          (progn (forward-char 1)
                 (just-one-space 0)
                 (backward-char 1)))))
;; taken from prelude-editor.el
;; automatically indenting yanked text if in programming-modes
(defvar yank-indent-modes
  '(LaTeX-mode TeX-mode)
  "Modes in which to indent regions that are yanked (or
  yank-popped). Only modes that don't derive from
  `prog-mode' should be listed here.")

(defvar yank-indent-blacklisted-modes
  '(python-mode slim-mode haml-mode)
  "Modes for which auto-indenting is suppressed.")

(defvar yank-advised-indent-threshold 1000
  "Threshold (# chars) over which indentation does not
  automatically occur.")

(defun yank-advised-indent-function (beg end)
  "Do indentation, as long as the region isn't too large."
  (if (<= (- end beg) yank-advised-indent-threshold)
      (indent-region beg end nil)))

(defadvice yank (after yank-indent activate)
  "If current mode is one of 'yank-indent-modes, indent
yanked text (with prefix arg don't indent)."

  (if (and (not (ad-get-arg 0))
           (not (member major-mode
                        yank-indent-blacklisted-modes))
           (or (derived-mode-p 'prog-mode)
               (member major-mode yank-indent-modes)))
      (let ((transient-mark-mode nil))
        (yank-advised-indent-function (region-beginning)
                                      (region-end)))))


(defadvice yank-pop (after yank-pop-indent activate)
  "If current mode is one of `yank-indent-modes', indent
yanked text (with prefix arg don't indent)."
  (when (and (not (ad-get-arg 0))
             (not (member major-mode
                          yank-indent-blacklisted-modes))
             (or (derived-mode-p 'prog-mode)
                 (member major-mode yank-indent-modes)))
    (let ((transient-mark-mode nil))
      (yank-advised-indent-function (region-beginning)
                                    (region-end)))))
;; prelude-core.el
(defun indent-buffer ()
  "Indent the currently visited buffer."
  (interactive)
  (indent-region (point-min) (point-max)))


;; prelude-editing.el
(defcustom prelude-indent-sensitive-modes
  '(coffee-mode python-mode slim-mode haml-mode yaml-mode)
  "Modes for which auto-indenting is suppressed."
  :type 'list
  :group 'prelude)

(defun indent-region-or-buffer ()
  "Indent a region if selected, otherwise the whole buffer."
  (interactive)
  (unless (member major-mode prelude-indent-sensitive-modes)
    (save-excursion
      (if (region-active-p)
          (progn
            (indent-region (region-beginning) (region-end))
            (message "Indented selected region."))
        (progn
          (indent-buffer)
          (message "Indented buffer.")))
      (whitespace-cleanup))))

(global-set-key (kbd "C-c i") 'indent-region-or-buffer)

;; add duplicate line function from Prelude
;; taken from prelude-core.el
(defun prelude-get-positions-of-line-or-region ()
  "Return positions (beg . end) of the current line or
region."
  (let (beg end)
    (if (and mark-active (> (point) (mark)))
        (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
        (exchange-point-and-mark))
    (setq end (line-end-position))
    (cons beg end)))

;; smart openline
(defun prelude-smart-open-line (arg)
  "Insert an empty line after the current line. Position the
cursor at its beginning, according to the current mode. With
a prefix ARG open line above the current line."
  (interactive "P")
  (if arg
      (prelude-smart-open-line-above)
    (progn
      (move-end-of-line nil)
      (newline-and-indent))))

(defun prelude-smart-open-line-above ()
  "Insert an empty line above the current line. Position the
cursor at it's beginning, according to the current mode."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))
(global-set-key (kbd "M-o") 'prelude-smart-open-line)
#+END_SRC

**** Avy
Avy provides an interesting way to find things in text. It
is the kind of thing that you definitely would be useful if
you got started but which I haven't really gotten started
with.
#+BEGIN_SRC emacs-lisp
(use-package avy
  :config
  (setq avy-all-windows nil)
  (use-package avy-zap
    :defer t)
  :bind (("C-:" . avy-goto-char)
	 ("C-;" . avy-goto-word-1)))
#+END_SRC
**** Dumb-Jump
Dumb jump tries to find variables and functions by simply
searching for the word in as many files as possible.
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :defer 2
  :diminish dumb-jump-mode
  :bind (("C-M-g" . dumb-jump-go)
	 ("C-M-p" . dumb-jump-back)
	 ("C-M-q" . dumb-jump-quick-look))
  :config
  (dumb-jump-mode t))
#+END_SRC

** PDF-Handling
The basic emacs pdf viewing utility, docview, is kind of
wonky. This installs a different utility, pdf-tools
which is wonderful! It does require some things
installed on your system to work (development version of
all of them)
- libpng
- libpoppler-glib, libpoppler-private
- imagemagick
- libz
- gcc, g++
- make
- automake
- autoconf

It is currently only enabled on linux, mac, and cygwin.
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :when (or (eq system-type 'gnu/linux)
	    (eq system-type 'cygwin)
	    (eq system-type 'darwin))
  :defer 2
  :config
  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
  (setq-default pdf-view-display-size 'fit-page))
#+END_SRC

* Development/Writing
Again, visit [[http://tuhdo.github.io][tuhdo]] but check out the stuff about helm specifically!
** Project Management
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :hook (prog-mode . projectile-mode)
  :config
  (setq projectile-enable-caching t)
  :diminish projectile-mode)
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
(when (not (string= system-type "windows-nt"))
  (use-package magit
    :commands magit-status
    :bind ("C-x g" . magit-status)
    :config)
  )
#+END_SRC
** Helm
Helm makes emacs a lot better.
*** Helm Gtags
#+BEGIN_SRC emacs-lisp
(use-package helm-gtags
  :when (executable-find "gtags")
  :hook ((dired-mode eshell-mode c-mode c++-mode java-mode asm-mode) . helm-gtags-mode)
  :config
  (setq
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key "\C-cg")
  (setq helm-gtags-prefix-key "\C-cg"))
#+END_SRC
*** Basic Configuration
#+BEGIN_SRC emacs-lisp
(use-package helm
  :functions helm-find-files
  :commands
  (helm-mode helm-M-x helm-show-kill-ring helm-mini
             helm-find helm-all-mark-rings
             helm-apropos helm-info-Emacs
             helm-locate-library helm-minibuffer-history
             helm-occur helm-wikipedia-suggest helm-register
             helm-etags-select helm-buffers-list helm-google
             helm-yas-complete helm-ag helm-grep-ag
             helm-elisp-show-help helm-command-prefix
             helm-locate helm-man-woman helm-autoresize-mode
             helm-descbinds-mode helm-themes helm-dash
             helm-multi-swoop-all
             helm-swoop-without-pre-input
             helm-swoop-from-isearch  helm-projectile
             helm-semantic helm-info-semantic)
  :diminish helm-mode
  :bind (("M-x" . helm-M-x)
	 ("M-y" . helm-show-kill-ring)
	 ("C-x b" . helm-mini)
	 ("C-x C-f" . helm-find-files)
	 ("C-h SPC" . helm-all-mark-rings)
	 :map help-map
	 ("C-f" . helm-apropos)
	 ("r" . helm-info-emacs)
	 ("C-l" . helm-locate-library)
	 :map minibuffer-local-map
	 ("M-p" . helm-minibuffer-history)
	 ("M-n" . helm-minibuffer-history)
	 :map helm-grep-mode-map
	 ("<return>" . helm-grep-mode-jump-other-window)
	 ("n" . helm-grep-mode-jump-other-window-forward)
	 ("p" . helm-grep-mode-jump-other-window-backward))
  :config
  (use-package helm-config
    :ensure nil)
  (helm-mode t)
  (use-package helm-files
    :ensure nil)
  (use-package helm-find
    :ensure nil)
  (use-package helm-command :ensure nil
    :config
    (setq helm-M-x-requires-pattern nil)
    (setq helm-M-x-fuzzy-match t))
  (use-package helm-grep
    :ensure nil)
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  (bind-key "C-c h o" #'helm-occur)
  (bind-key "C-c h C-c w" #'helm-wikipedia-suggest)
  (bind-key "C-c h x" #'helm-register)
  (define-key global-map [remap find-tag] 'helm-etags-select)
  (define-key global-map [remap list-buffers] 'helm-buffers-list)

  (use-package helm-google
    :config
    (when (executable-find "curl")
      (setq helm-net-prefer-curl t)))
  (use-package helm-c-yasnippet
    :after yasnippet
    :config
    (setq helm-yas-display-key-on-candidate t))
  (use-package helm-ag)
  (use-package helm-elisp
    :ensure nil
    :config
    (setq helm-apropos-fuzzy-match t))

  (use-package helm-locate
    :ensure nil
    :config
    (setq helm-locate-fuzzy-match t))
  (use-package helm-files
    :ensure nil
    :config
    (setq helm-ff-search-library-in-sexp t
	  helm-ff-file-name-history-use-recentf t
	  helm-ff-skip-boring-files t))
  (use-package helm-for-files
    :ensure nil)
  (setq helm-scroll-amount 4
	helm-split-window-inside-p t
	helm-input-idle-delay 0.01
	helm-candidate-number-limit 500
	helm-move-to-line-cycle-in-source t
	helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t)
  (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
  ;; (add-hook 'eshell-mode-hook
  ;;           #'(lambda ()
  ;;               (define-key eshell-mode-map (kbd "M-l")  'helm-eshell-history)))
  (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)
  (helm-autoresize-mode t)
  (use-package helm-descbinds
    :config
    (helm-descbinds-mode t))
  (use-package helm-themes
    :commands helm-themes
    :bind (("<f10>" . helm-themes)))
  (use-package helm-dash)
  (use-package helm-rtags
    :after rtags
    :load-path elib:rtags-load-path
    :ensure nil
    :config
    (setq rtags-display-result-backend 'helm))
  (use-package helm-swoop
    :bind
    (("C-c s" . helm-multi-swoop-all)
     ("C-s" . helm-swoop-without-pre-input)
     ("C-r" . helm-swoop-without-pre-input)
     :map isearch-mode-map
     ("M-i" . helm-swoop-from-isearch))
    :commands
    (helm-swoop
     helm-multi-swoop
     helm-swoop-from-isearch
     helm-multi-swoop-all-from-helm-swoop)
    :config
    (global-set-key (kbd "C-c h s") 'helm-swoop)
    (define-key helm-swoop-map (kbd "M-i")
      'helm-multi-swoop-all-from-helm-swoop)
    (setq helm-multi-swoop-edit-save t
	  helm-swoop-split-with-multiple-windows t
	  helm-swoop-split-direction 'split-window-vertically
	  helm-swoop-speed-or-color t))
  (use-package helm-projectile
    :after (projectile)
    :config
    (helm-projectile-on)
    (setq projectile-completion-system 'helm)
    (setq projectile-indexing-method 'alien)))
#+END_SRC
** Elglot
An emacs language server protocol client. Kind of new.
Hopefully it gets useful in the future.
#+BEGIN_SRC emacs-lisp
(use-package eglot)
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :init
  (defun start-yasnippet ()
    (interactive)
    (yas-minor-mode t))
  :commands yas-minor-mode
  :hook (((prog-mode TeX-mode) . start-yasnippet))
  :config
  (use-package yasnippet-snippets)
  (set 'yas-verbosity 1)
  (add-to-list 'yas-snippet-dirs tuhdo-snippets-directory))
#+END_SRC
** Terminal Usage
Create and use multiple terminals with multi-term. It is
pretty nifty.
#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :bind (("<f6>" . multi-term-next)
	 ("C-<f6>" . multi-term)
	 :map term-raw-map
	 ("C-c C-j" . term-line-mode))
  :config
  (if (file-exists-p "/usr/bin/fish")
      (setq multi-term-program "/usr/bin/fish"))
  (when (require 'term nil t) ;; only if term can be loaded..
    (setq
     term-bind-key-alist
     (list
      (cons "C-c C-c" 'term-interrupt-subjob)
      (cons "C-p" 'previous-line)
      (cons "C-n" 'next-line)
      (cons "M-f" 'term-send-forward-word)
      (cons "M-b" 'term-send-backward-word)
      (cons "C-c C-j" 'term-line-mode)
      (cons "C-c C-k" 'term-char-mode)
      (cons "M-DEL" 'term-send-backward-kill-word)
      (cons "M-d" 'term-send-forward-kill-word)
      (cons "<C-left>" 'term-send-backward-word)
      (cons "<C-right>" 'term-send-forward-word)
      (cons "C-r" 'term-send-reverse-search-history)
      (cons "M-p" 'term-send-raw-meta)
      (cons "M-y" 'term-send-raw-meta)
      (cons "C-y" 'term-send-raw)))))
	 #+END_SRC
** LaTeX/AUCTeX
#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex
  :mode (("\\.tex$" . TeX-mode))
  :defines TeX-run-TeX
  :bind (:map TeX-mode-map
	      ("C-c v" . elib:helm-tex-choose-program))


  :commands
  (TeX-revert-document-buffer
   TeX-command TeX-master-file)
  :config
  (setq TeX-source-correlate-start-server t)
  (add-hook 'LaTeX-mode-hook #'TeX-source-correlate-mode)
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  ;; (define-key TeX-mode-map (kbd "TAB") 'company-complete)
  ;; (define-key TeX-mode-map (kbd "TAB") 'company-complete)
  (use-package tex-buf :ensure nil)
  (use-package latex-preview-pane
    :config
    (setq TeX-save-query nil)
    (latex-preview-pane-enable))
  (setq doc-view-continuous t)
  (use-package preview-latex
    :disabled t
    :defer 1)
  (use-package asy-mode
    :after (tex tex-buf)
    :when (executable-find "asy")
    :ensure nil
    :load-path elib:asymptote-load-path
    :mode ("\\.asy\\'" . asy-mode)
    :init
    (autoload 'asy-mode "asy-mode.el" "Asymptote Major Mode" t)
    (autoload 'lasy-mode "asy-mode.el" "Hybrid Asymptote/LaTeX Major Mode" t)
    (autoload 'asy-insinuate-latex "asy-mode.el" "Asymptote Insinuate LaTeX" t)
    :config
    (defun run-asy-in-tex ()
      (interactive "")
      (TeX-command TeX-run-TeX (TeX-master-file nil nil nil) t)
      (save-window-excursion (compile "asy *.asy"))
      (TeX-command TeX-run-TeX (TeX-master-file nil nil nil) t)
      )
    (add-to-list 'TeX-command-list
		 '("Asymptote" "asy *.asy" TeX-run-TeX nil t :help "Run Asymptote")))
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil))
	 #+END_SRC
** Company
 	#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :config
  (global-company-mode t)

  (setq company-idle-delay 0.1
	company-tooltip-idle-delay 0.1)
			;;; Back-ends
			;;; C/C++
  (use-package company-clang :ensure nil
    :config
    (setq
     company-clang-arguments
     (list "-std=c++1z" "-Wall" "-Werror"
	   "-Wpedantic -I./ -I./include/ -I../include/ -I../")))
  (use-package company-c-headers
    :after cc-mode
    :config
    ;; (define-key c-mode-map  [(tab)] 'company-complete)
    ;; (define-key c++-mode-map  [(tab)] 'company-complete)
    ;; (define-key c-mode-map (kbd "TAB") 'company-complete)
    ;; (define-key c++-mode-map (kbd "TAB") 'company-complete)
    (use-package semantic
      :commands semantic-gcc-setup
      :functions semantic-gcc-get-include-paths
      :config
      (semantic-gcc-setup)
      (dolist (name (semantic-gcc-get-include-paths "c++"))
	(add-to-list 'company-c-headers-path-system name)))
    (add-to-list 'company-backends 'company-c-headers))
  (use-package company-irony
    :after irony
    :hook (irony-mode . company-irony-setup-begin-commands)
    :config
    (use-package company-irony-c-headers
      :after company-c-headers
      :config
      (add-to-list 'company-backends '(company-irony-c-headers company-irony))))
  (use-package company-rtags
    :after rtags
    :load-path elib:rtags-load-path
    :ensure nil
    :when (executable-find "rdm")
    :config
    (setq rtags-completions-enabled t)
    (add-to-list 'company-backends 'company-rtags))
			;;; TeX
  (use-package company-auctex
    :after tex
    :config
    (company-auctex-init))
			 ;;; Yasnippet
  (use-package company-yasnippet
    :ensure nil
    :after yasnippet
    :config
    (global-set-key (kbd "C-c y") 'company-yasnippet))
			;;; Elisp
  ;; (define-key emacs-lisp-mode-map (kbd "TAB") 'company-complete)
			;;; Generic
  ;; (define-key prog-mode-map (kbd "TAB") 'company-complete)
			;;; Config

  (when company-backends
    (progn
      (delete 'company-semantic company-backends))))
  #+END_SRC
** Flycheck
	 #+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer 2
  :init
  (defun disable-flycheck-temporarily ()
    "Disables flycheck in current buffer."
    (interactive)
    (flycheck-mode -1))
  :config
  (setq flycheck-idle-change-delay 0.1)
  (add-hook 'org-src-mode-hook
            'disable-flycheck-temporarily)
  (use-package flycheck-rtags
    :after rtags
    :load-path elib:rtags-load-path
    :ensure nil
    :hook (c-mode-common . another-flycheck-rtags-setup)
    :init
    (defun another-flycheck-rtags-setup ()
      (interactive)
      (flycheck-select-checker 'rtags)
      (setq-local flycheck-highlighting-mode nil)
      (setq-local flycheck-check-syntax-automatically nil)
      (rtags-enable-standard-keybindings)))
  (global-flycheck-mode t))
	 #+END_SRC
** Web Development
	 #+BEGIN_SRC emacs-lisp
(use-package web-mode
	:defer 2)
	 #+END_SRC
** C/C++
*** Basic Settings
		#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :mode (("\\.c\\'" . c-mode)
         ("\\.h\\'" . c++-mode)
         ("\\.hpp\\'" . c++-mode)
         ("\\.hxx\\'" . c++-mode)
         ("\\.ii\\'" . c++-mode)
         ("\\.C\\'" . c++-mode)
         ("\\.cpp\\'" . c++-mode)
         ("\\.CPP\\'" . c++-mode)
         ("\\.c++\\'" . c++-mode)
         ("\\.cxx\\'" . c++-mode)
         ("\\.cc\\'" . c++-mode)
         ("\\.CC\\'" . c++-mode))
  :hook (c-mode-common . hs-minor-mode)
  :bind (:map c-mode-base-map
              ("C-c o" . ff-find-other-file))
  :config
  (setq c-default-style "stroustrup"))
		#+END_SRC
*** Debugging
		This is really cool. Try it with M-x gdb and choose the
		binary you want to debug.
		#+BEGIN_SRC emacs-lisp
(use-package gdb-mi
	:config
	(setq gdb-many-windows t
				gdb-show-main t))
		#+END_SRC
*** Packages
**** Irony Mode
		 #+BEGIN_SRC emacs-lisp
(use-package irony
  :after cc-mode
  :hook ((irony-mode . irony-cdb-autosetup-compile-options)
         (c-mode-common . irony-mode))

  )
		 #+END_SRC
**** Rtags
		 #+BEGIN_SRC emacs-lisp
(use-package rtags
  :after cc-mode
  :when (executable-find "rdm")
  :commands rtags-diagnostics
  :load-path elib:rtags-load-path
  :ensure nil
  :bind (:map c-mode-base-map
              ("M-." . rtags-find-symbol-at-point)
              ("M-," . rtags-location-stack-back)
              ("C-x ." . rtags-find-symbol))
  :hook (c-mode-common . rtags-start-process-unless-running)
  :config
  (setq rtags-completions-enabled t)
  (setq rtags-autostart-diagnostics t)
  (rtags-diagnostics))
		 #+END_SRC
**** Clang Format
		 #+BEGIN_SRC emacs-lisp
(use-package clang-format
  :after cc-mode
  :bind (:map
	 c-mode-map
	 ("C-c f" . clang-format-region)
	 ("C-c C-f" . clang-format-buffer)
	 :map c++-mode-map
	 ("C-c f" . clang-format-region)
	 ("C-c C-f" . clang-format-buffer)))
		 #+END_SRC

**** Cmake
		 #+BEGIN_SRC emacs-lisp
(use-package cmake-mode
  :defer t
  :config
  (use-package cmake-font-lock
    :defer t
    :hook (cmake-mode . cmake-font-lock-activate)
    :config
    (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)))
		 #+END_SRC
**** Meson

		 #+BEGIN_SRC emacs-lisp
(use-package meson-mode)
		 #+END_SRC
**** Cmake-ide
		 #+BEGIN_SRC emacs-lisp
(use-package cmake-ide
	:after rtags
	:config
	(cmake-ide-setup))
		 #+END_SRC
** Emacs Lisp
*** Elisp Development
#+BEGIN_SRC emacs-lisp


;; (defvar lisp-modes '(emacs-lisp-mode
;;   inferior-emacs-lisp-mode ielm-mode lisp-mode
;;   inferior-lisp-mode lisp-interaction-mode
;;   slime-repl-mode))

;; (defvar lisp-mode-hooks
;;   (mapcar (function
;; 	   (lambda (mode)
;; 	     (intern
;; 	      (concat (symbol-name mode) "-hook"))))
;; 	  lisp-modes))
;; (defsubst hook-into-modes (func &rest modes)
;; 	(dolist (mode-hook modes) (add-hook mode-hook func)))
;; (use-package info-look
;; 	:commands info-lookup-add-help)
;; (use-package lisp-mode
;;   :ensure nil
;;   :defer t
;;   :hook ((emacs-lisp-mode . disable-smartparens)
;;          (emacs-lisp-mode . enable-paredit))
;;   :config
;;   (use-package paredit
;;     :commands paredit-mode
;;     :preface
;;     (defun disable-smartparens ()
;;       (interactive)
;;       "Disables smartparens."
;;       (turn-off-smartparens-mode))
;;     (defun enable-paredit ()
;;       (interactive)
;;       "Enables paredit."
;;       (paredit-mode t))
;;     )
;;   (use-package slime
;;     :after (company lisp-mode)
;;     :config
;;     (use-package elisp-slime-nav)
;;     (use-package slime-company))


;;   :preface
;;   (defun my-elisp-indent-or-complete (&optional arg)
;;     (interactive "p")
;;     (call-interactively 'lisp-indent-line)
;;     (unless (or (looking-back "\\s-*" 120) (bolp)
;; 		(not (looking-back "[-A-Za-z0-9_*+/=<>!?]+" 120)))
;;       (call-interactively 'lisp-complete-symbol)))
;;   ;; (defun my-lisp-indent-or-complete (&optional arg)
;;   ;;   (interactive "p")
;;   ;;   (if (or (looking-back "^\\s-*") (bolp))
;;   ;;       (call-interactively 'lisp-indent-line)
;;   ;;     (call-interactively 'slime-indent-and-complete-symbol)))
;;   (defun my-byte-recompile-file ()
;;     (save-excursion
;;       (byte-recompile-file buffer-file-name)))
;;   (defvar smile-mode nil)
;;   (defvar lisp-mode-initialized nil)
;;   (defun my-lisp-mode-hook ()
;;     (unless lisp-mode-initialized
;;       (setq lisp-mode-initialized t)
;;       (use-package redshank
;; 	:diminish redshank-mode)
;;       (use-package elisp-slime-nav
;; 	:disabled t
;; 	:diminish elisp-slime-nav-mode)
;;       (use-package edebug)
;;       (use-package eldoc
;; 	:diminish eldoc-mode
;; 	:commands eldoc-mode
;; 	:config
;; 	(use-package eldoc-extension
;; 	  :disabled t
;; 	  :defer t
;; 	  :init
;; 	  (add-hook 'emacs-lisp-mode-hook #'(lambda () (require 'eldoc-extension)) t))
;; 	(eldoc-add-command 'paredit-backward-delete 'paredit-close-round))
;;       (use-package cldoc
;; 	:ensure nil
;; 	:disabled t
;; 	:commands (cldoc-mode turn-on-cldoc-mode)
;; 	:diminish cldoc-mode)
;;       (use-package ert
;; 	:bind ("C-c e t" . ert-run-tests-interactively)
;; 	:config
;; 	(use-package el-mock))

;;       ;;(use-package buttercup
;;       ;;  :bind (("C-c b" . buttercup-run-at-point ))
;;       ;;  )
;;       (use-package elint
;; 	:commands 'elint-initialize
;; 	:preface
;; 	(defun elint-current-buffer ()
;; 	  (interactive)
;; 	  (elint-initialize)
;; 	  (elint-current-buffer))
;; 	:config
;; 	(add-to-list 'elint-standard-variables 'current-prefix-arg)
;; 	(add-to-list 'elint-standard-variables 'command-line-args-left)
;; 	(add-to-list 'elint-standard-variables 'buffer-file-coding-system)
;; 	(add-to-list 'elint-standard-variables 'emacs-major-version)
;; 	(add-to-list 'elint-standard-variables 'window-system))
;;       (use-package highlight-cl
;; 	:disabled t
;; 	:init
;; 	(mapc (function
;; 	       (lambda (mode-hook)
;; 		 (add-hook mode-hook 'highlight-cl-add-font-lock-keywords)))
;; 	      lisp-mode-hooks))

;;       (use-package testcover :commands
;; 	testcover-this-defun) (mapc (lambda (mode)
;; 	(info-lookup-add-help :mode mode :regexp "[^][()'\"
;; 	\t\n]+" :ignore-case t :doc-spec '(("(ansicl)Symbol
;; 	Index" nil nil nil)))) lisp-modes)) (auto-fill-mode
;; 	1) (when (featurep 'elisp-slime-nav-mode)
;; 	(elisp-slime-nav-mode 1)) (paredit-mode 1) (when
;; 	(featurep 'redshank-mode) (redshank-mode 1))
;; 	(local-set-key (kbd "<return>") 'paredit-newline)
;; 	(bind-key "<tab>" #'my-elisp-indent-or-complete
;; 	emacs-lisp-mode-map) (add-hook 'after-save-hook
;; 	'check-parens nil t) (unless (memq major-mode
;; 	'(emacs-lisp-mode inferior-emacs-lisp-mode
;; 	ielm-mode)) ;; (turn-on-cldoc-mode) ;; (bind-key
;; 	"M-q" #'slime-reindent-defun lisp-mode-map)
;; 	(bind-key "M-l" #'slime-selector lisp-mode-map)))
;; 	:init (apply #'hook-into-modes 'my-lisp-mode-hook
;; 	lisp-mode-hooks))
		#+END_SRC

** Java
#+BEGIN_SRC emacs-lisp 
;; (defvar eclim-path (or (when (file-exists-p
;;                               "~/.eclipse/org.eclipse.platform_155965261_linux_gtk_x86_64/")
;;                          "~/.eclipse/org.eclipse.platform_155965261_linux_gtk_x86_64/")))
;; (use-package eclim
;;   :config
;;   (add-hook 'java-mode-hook 'eclim-mode)
;;   (setq eclim-executable (concat eclim-path "eclim"))
;;   (use-package eclimd
;;     :ensure nil)
;;   (use-package gradle-mode
;;     :config
;;     (add-hook 'java-mode-hook 'gradle-mode)
;;     )
;;   )

(use-package cider)

#+END_SRC
* Org Mode
** Basic Setup
	 #+BEGIN_SRC emacs-lisp
(defun re-parse-configurations ()
  "Re parse the main configuration file"
  (interactive)
  (org-babel-load-file config-file-file-name))

(use-package org
  :ensure org-plus-contrib
  :commands (org-mode org-babel-load-file org-babel-tangle-file)
  :preface

  (fset 'org-call-export-to-pdf
        (lambda (&optional arg) "Keyboard macro."
          (interactive "p")
          (kmacro-exec-ring-item '("lp" 0 "%d") arg)))

  (fset 'org-call-export-to-beamer
        (lambda (&optional arg) "Keyboard macro."
          (interactive "p")
          (kmacro-exec-ring-item
           (quote ("lP" 0
	           "%d")) arg)))

  :init
  (setq-default major-mode 'org-mode)
  (setq initial-major-mode 'org-mode)


  (defun hot-expand (str)
    "Expand org template."
    (insert str)
    (org-try-structure-completion))
  (defun org-self-insert-or-less ()
    (interactive)
    (if (looking-back "^")
        (hydra-org-template/body)
      (self-insert-command 1)))
  :config
  (use-package org-beautify-theme
    :disabled t)
  (setq org-pretty-entities t)
  (setq org-pretty-entities-include-sub-superscripts t)
  (setq org-startup-indented t)
  (setq org-export-async-init-file
        (expand-file-name
         (concat user-emacs-directory
                 "orginit.el"))
        org-export-in-background t
        org-export-async-debug nil)
  (use-package ox-latex
    :ensure nil
    :config
    (setq org-startup-with-latex-preview t))
  (use-package ox-twbs)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t) (emacs-lisp . t) (python . t)
                                        ;(sh . t)
     (gnuplot . t)))

  (setq org-src-preserve-indentation t)
  (setq org-src-tab-acts-natively t)
  (plist-put org-format-latex-options :scale 1.5)

  (setq org-default-notes-file user-org-todo-file-name
	org-use-fast-todo-selection t
	org-src-window-setup 'current-window)
  :bind (("\C-cl" . org-store-link)
	 ("\C-cb" . org-iswitchb)
	 :map org-mode-map
         ("<" . org-self-insert-or-less)
         ("C-c M-o" . org-toggle-link-display)
         ("S-<f5>" . org-call-export-to-pdf)
	 ;;("<f5>" . org-call-export-to-beamer)
	 ("C-c ." . org-time-stamp)
	 ("\M-\C-g" . org-plot/gnuplot)))


	 #+END_SRC
** Capture 
#+BEGIN_SRC emacs-lisp 
(use-package org-capture
  :ensure nil
  :after org
  :commands org-capture
  :bind	 (("C-c c"  . org-capture))
  :config
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline
                             user-org-todo-file-name
                             "To do")
           "* TODO %?\n%U" :empty-lines 1)
          ("T" "Todo with Clipboard" entry (file+headline
                                            user-org-todo-file-name
                                            "To do") 
           "* TODO %?\n%U\n   %c" :empty-lines 1)
          ("n" "Note" entry (file+headline
                             user-org-todo-file-name "Notes")
           "* NOTE %?\n%U" :empty-lines 1)
          ("N" "Note with Clipboard" entry (file+headline
                                            user-org-todo-file-name "Notes")
           "* NOTE %?\n%U\n   %c" :empty-lines 1)
          ("e" "Event" entry (file+headline user-org-todo-file-name "Events")
           "* EVENT %?\n%U" :empty-lines 1)
          ("E" "Event With Clipboard" entry (file+headline user-org-todo-file-name "Events")
           "* EVENT %?\n%U\n   %c" :empty-lines 1)
          ("E" "Event With Clipboard" entry (file+headline user-org-todo-file-name "Events")
           "* EVENT %?\n%U\n   %c" :empty-lines 1)
          ("q" "Quote " entry (file user-org-quotes-file-name)
           "* %?\n%U\n   " :empty-lines 1)
          ("Q" "Quote With Clipboard" entry (file user-org-quotes-file-name)
           "* %?\n%U\n   %c" :empty-lines 1))))
#+END_SRC
** Structure Templates
#+BEGIN_SRC emacs-lisp
(eval-after-load "hydra"
  (defhydra hydra-org-template (:color blue :hint nil)
    "
_c_enter          _q_uote          _L_aTeX:
_d_efn            _ex_ample        _th_eorem:
_ll_atex-snippet  _eq_uation       _l_atex:
_p_roof           _lh_eader        _n_amed equation:
_el_isp           _a_scii          _v_erse:
_I_NCLUDE         _s_rc            _H_TML:
_h_tml            _i_ndex          _A_SCII:
"
    ("s" (hot-expand "<s"))
    ("ex" (hot-expand "<ex"))
    ("d" (hot-expand "<dfn"))
    ("n" (hot-expand "<n"))
    ("lh" (hot-expand "<lh"))
    ("th" (hot-expand "<th"))
    ("ll" (hot-expand "<ll"))
    ("eq" (hot-expand "<eq"))
    ("p" (hot-expand "<p"))
    ("el" (hot-expand "<el"))
    ("q" (hot-expand "<q"))
    ("v" (hot-expand "<v"))
    ("c" (hot-expand "<c"))
    ("l" (hot-expand "<l"))
    ("h" (hot-expand "<h"))
    ("a" (hot-expand "<a"))
    ("L" (hot-expand "<L"))
    ("i" (hot-expand "<i"))
    ("I" (hot-expand "<I"))
    ("H" (hot-expand "<H"))
    ("A" (hot-expand "<A"))
    ("t" (hot-expand "<t"))
    ("<" self-insert-command "ins")
    ("o" nil "quit")))

(add-to-list-multi
 'org-structure-template-alist
 '(("la" "#+BEGIN_EXPORT latex\
 \n\\begin{align*}\n?\n\\end{align*}\n#+END_EXPORT")

   ("cc" "#+BEGIN_SRC C++ :flags -lginac -lcln -ldl :exports\
 none\n?\n#+END_SRC")

   ("el" "#+BEGIN_SRC emacs-lisp \n?\n#+END_SRC")
   ("eq" "\\begin{equation}\n?\n\\end{equation}\n")
   ("th" "#+begin_theorem\n?\n#+end_theorem\n")
   ("dfn" "\\begin{defn}{?}\n\n\\end{defn}")
   ("ex" "\\begin{exmp}?\n\n\\end{exmp}")
   ("lh"
    "#+LATEX_HEADER: \\usepackage{etex} \n#+OPTIONS: num:6\
   H:6\n")
   ("ll" "@@latex:?@@")
   ("p" "\\begin{prf}\n?\n\\end{prf}")
   ("n" "#+NAME:?\n#+BEGIN_EQUATION\n #+END_EQUATION\n"))
 nil 'equal)
#+END_SRC
** Agenda 
#+BEGIN_SRC emacs-lisp 
(use-package org-agenda
  :ensure nil
  :commands org-agenda
  :bind (("\C-ca" . org-agenda))
  :after org
  :config
  (setq org-agenda-dim-blocked-tasks nil)
  (setq org-agenda-compact-blocks t)
  (setq org-agenda-files (list user-org-todo-file-name
                               org-gcal-calendar-main-file-name
                               org-gcal-calendar-lu-file-name
                               org-gcal-calendar-info-ordf-file-name)))
#+END_SRC
** Calendar
	 #+BEGIN_SRC emacs-lisp
(use-package calfw
  :after org
  :when (file-exists-p
         (expand-file-name "~/nextcloud/org/orgsettings.el"))
  :commands (org-gcal
             org-gcal-sync org-gcal-fetch
             org-gcal-refresh-token
             elib:open-calendar)
  :bind ("C-c q" . elib:open-calendar)
  :init
  (defun elib:open-calendar ()
    (interactive)
    (cfw:open-calendar-buffer
     :date nil :buffer nil :custom-map nil :view nil
     :sorter nil
     :annotation-sources nil
     :contents-sources
     (list (cfw:org-create-file-source
            "Gmail" org-gcal-calendar-main-file-name "Blue")
           (cfw:org-create-file-source
            "Info" org-gcal-calendar-info-ordf-file-name "Purple")
           (cfw:org-create-file-source
            "lu" org-gcal-calendar-info-ordf-file-name "Red"))))
  :config
  (use-package calfw-org)
  (use-package calfw-gcal)
  (use-package org-gcal
    :ensure nil
    :hook ((org-agenda-mode . org-gcal-fetch)
           (org-capture-after-finalize . org-gcal-fetch))
    :load-path elib:org-gcal-load-path
    :config
    (load-file (expand-file-name "~/nextcloud/org/orgsettings.el")))
  (setq cfw:org-agenda-schedule-args '(:timestamp))
  (setq cfw:org-overwrite-default-keybinding t))

	 #+END_SRC
* Communication
** Email
*** Misc
		#+BEGIN_SRC emacs-lisp
(require 'gnus-dired)
(require 'smtpmail)

;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(bind-keys* :map dired-mode-map ("a" . gnus-dired-attach))

(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
	(set-buffer buffer)
	(when (and (derived-mode-p 'message-mode)
		   (null message-sent-message-via))
	  (push (buffer-name buffer) buffers))))
    (nreverse buffers)))
(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
		#+END_SRC
*** Mu4e
		#+BEGIN_SRC emacs-lisp
(defun my-mu4e-choose-signature ()
  "Insert one of a number of sigs"
  (interactive)
  (let
      ((message-signature
        (mu4e-read-option
         "Signature:"
         '(("info" .
            "*Einar Elén*
Chairperson // Ordförande of the Information Committee (Info)
The Science Student Union (LUNA) at Lund University

info-ordf@luna.lu.se, www.lundsnaturvetarkar.se/info
Office address: Sölvegatan 27, 223 62 Lund Post address:
Box 117, 221 00 Lund

The Science Student Union represents about 1800 students
studying at the Faculty of Science at Lund University. The
union works mainly with education monitoring and student
representation but also with aiding students with corporate
relations and hosting social events.

The Information Committee ensures that information from the
union and all its committees, councils and groups reaches as
many members as possible, in the best possible way.

The biggest task of the committee is to distribute the
monthly union newsletter Zenit, that can be read at most
toilets at the departments at the Faculty of Science. The
committee also takes part in the information flow by working
with social media and work delegated by the union board.
")
           ("jnformal" .
            "Joe\n")))))
    (message-insert-signature)))

(defvar mu4e-previous-attachment-directory "~/Downloads")
(defvar mu4e-attachment-dired-buffer nil)
(defvar mu4e-attachment-dired-buffer-name "*mu4e-dired-for-attach*")



(bind-keys*
 :map dired-mode-map
 ("Q" . mu4e-attachment-quit))

(defun start-mu4e-attachment-dired ()
  (interactive)
  ;; (unless (bufferp mu4e-attachment-dired-buffer)
  ;;   (setq mu4e-attachment-dired-buffer
  ;;         (get-buffer-create
  ;;          mu4e-attachment-dired-buffer-name)))
  (dired mu4e-previous-attachment-directory)
  (let ((previous-dired dired-directory))
    (if (y-or-n-p-with-timeout (format "Use previous attachment
  directory, %s? " previous-dired) 4 t)
        (progn (quit-window)
               (dired mu4e-previous-attachment-directory))
      (progn (quit-window)
             (call-interactively 'dired)))))
(defun mu4e-attachment-quit ()
  (interactive)
  (if (equal major-mode 'dired-mode)
      (setq mu4e-previous-attachment-directory
            dired-directory))
  (quit-window))
(defun mu4e-attach-advice (&rest ignored)
  (mu4e-attachment-quit))
(advice-add 'gnus-dired-attach :after #'mu4e-attach-advice)


(when elib:mu4e-load-path
  (use-package mu4e
    :ensure nil
    :bind (("<f12>" . mu4e)
           :map mu4e-compose-mode-map
           ("C-c d" . start-mu4e-attachment-dired)
           )
    :when (executable-find "mu")
    :init
    (defun choose-msmtp-account ()
      (if (message-mail-p)
          (save-excursion
            (let*
                ((from (save-restriction
                         (message-narrow-to-headers)
                         (message-fetch-field "from")))
                 (case-fold-search t)
                 (account
                  (cond
                   ((string-match "gmail.com" from) "gmail")
                   ((string-match "student.lu.se" from) "lu")
                   ((string-match "luna.lu.se" from) "info"))))
              (setq message-sendmail-extra-arguments (list '"-a" account))))))
    (defun my-mu4e-set-account ()
      "Set the account for composing a message."
      (let* ((account
              (if mu4e-compose-parent-message
                  (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                    (string-match "/\\(.*?\\)/" maildir)
                    (match-string 1 maildir))
                (completing-read (format "Compose with account: (%s) "
                                         (mapconcat #'(lambda (var) (car var))
                                                    my-mu4e-account-alist "/"))
                                 (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                                 nil t nil nil (caar my-mu4e-account-alist))))
             (account-vars (cdr (assoc account my-mu4e-account-alist))))
        (if account-vars
            (mapc #'(lambda (var)
                      (set (car var) (cadr var)))
                  account-vars)
          (error "No email account found"))))
    :load-path elib:mu4e-load-path
    :hook ((mu4e-compose-mode . (lambda ()
                                  (local-set-key
                                   (kbd "C-c C-w")
                                   #'my-mu4e-choose-signature)))
           (message-send-mail . choose-msmtp-account)
           (mu4e-compose-pre . my-mu4e-set-account))
    :config
    (use-package helm-mu
      :after helm
      :bind (:map mu4e-main-mode-map
                  ("s" . helm-mu)
                  ("c" . helm-mu-contacts)
                  :map mu4e-headers-mode-map
                  ("s" . helm-mu)
                  ("c" . helm-mu-contacts)
                  :map mu4e-view-mode-map
                  ("s" . helm-mu))
      :config
      (setq helm-mu-contacts-after "01-Jan-2017 00:00:00"))
    (use-package mu4e-contrib
      :ensure nil
      :load-path elib:mu4e-load-path)
    (use-package org-mu4e
      :load-path elib:mu4e-load-path
      :ensure nil
      :after org
      :config
      (setq org-mu4e-link-query-in-headers-mode nil))
    (use-package mu4e-alert)
    (use-package mu4e-jump-to-list)
    (use-package mu4e-conversation)
    (use-package mu4e-maildirs-extension)
    (setq mu4e-maildir "~/Maildir"
          mu4e-sent-messages-behavior 'delete
          mu4e-use-fancy-chars t
          mu4e-attachment-dir "~/Downloads/"
          mu4e-view-show-images t
          mu4e-get-mail-command "mbsync -a"
          mu4e-update-interval 3600)
    (setq mu4e-sent-folder "/gmail/[Gmail]/Sent Mail"
          mu4e-drafts-folder "/gmail/[Gmail]/Drafts"
          mu4e-trash-folder "/gmail/[Gmail]/Trash"
          user-mail-address "einar.elen@gmail.com"
          smtpmail-default-smtp-server "smtp.gmail.com"
          ;;smtpmail-local-domain "account1.example.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-stream-type 'starttls
          smtpmail-smtp-service 587)


    (defvar my-mu4e-account-alist
      '(("gmail"
         (mu4e-sent-folder "/gmail/[Gmail]/Sent Mail")
         (mu4e-drafts-folder "/gmail/[Gmail]/Drafts")
         (mu4e-trash-folder "/gmail/[Gmail]/Trash")
         (user-full-name "Einar Elén")
         (user-mail-address "einar.elen@gmail.com")
         (smtpmail-default-smtp-server "smtp.gmail.com")
         ;;smtpmail-local-domain "account1.example.com"
         (smtpmail-smtp-server "smtp.gmail.com")
         (smtpmail-stream-type 'starttls)
         (smtpmail-smtp-service 587)
         )
        ("lu"
         (mu4e-sent-folder "/lu/[Gmail]/Sent Mail")
         (mu4e-drafts-folder "/lu/[Gmail]/Drafts")
         (mu4e-trash-folder "/lu/[Gmail]/Trash")
         (user-mail-address "nat13eel@student.lu.se")
         (user-full-name "Einar Elén")
         (smtpmail-default-smtp-server "smtp.gmail.com")
         ;;(smtpmail-local-domain "")
         (smtpmail-smtp-user "nat13eel")
         (smtpmail-smtp-server "smtp.gmail.com")
         (smtpmail-stream-type starttls)
         (smtpmail-smtp-service 465))
        ("info"
         (mu4e-sent-folder "/info/[Gmail]/Skickat")
         (mu4e-drafts-folder "/info/[Gmail]/Utkast")
         (mu4e-trash-folder "/info/[Gmail]/Papperskorgen")
         (user-mail-address "info-ordf@luna.lu.se")
         (user-full-name "Chairperson, Information Committee (LUNA)")
         (smtpmail-default-smtp-server "smtp.gmail.com")
         ;;(smtpmail-local-domain "")
         (smtpmail-smtp-user "info-ordf")
         (smtpmail-smtp-server "smtp.gmail.com")
         (smtpmail-stream-type starttls)
         (smtpmail-smtp-service 25))
        ))

    (setq message-send-mail-function 'message-send-mail-with-sendmail
          sendmail-program "/usr/bin/msmtp"
          user-full-name "Einar Elén")
    ;; Borrowed from http://ionrock.org/emacs-email-and-mu.html
    ;; Choose account label to feed msmtp -a option based on From header
    ;; in Message buffer; This function must be added to
    ;; message-send-mail-hook for on-the-fly change of From address before
    ;; sending message since message-send-mail-hook is processed right
    ;; before sending message.

    (setq message-sendmail-envelope-from 'header)

    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "All New Inbox Mail"
                  :query "maildir:/gmail/Inbox OR \
maildir:/lu/Inbox OR maildir:/info/Inbox and flag:unread"
                  :key ?z))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "All Sent Mail"
                  :query
                  "\"maildir:/gmail/[Gmail]/Sent Mail\" OR \
\"maildir:/lu/[Gmail]/Sent Mail\" OR \
maildir:/info/[Gmail]/Skickat"
                  :key ?s))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "With PDF Files"
                  :query "mime:application/pdf"
                  :key ?P))
    (setq mu4e-maildir-shortcuts
          '(("/gmail/Inbox" . ?g)
            ("/gmail/[Gmail]/Sent Mail" . ?G)
            ("/lu/Inbox" . ?l)
            ("/lu/[Gmail]/Sent Mail" . ?L)
            ("/info/Inbox" . ?i)
            ("/info/[Gmail]/Skickat" . ?I)
            ("/gmail/[Gmail]/Trash" . ?t)
            ))
    ;; (add-to-list 'mu4e-bookmarks
    ;;              '("maildir:/Gmail/gitorious-ml flag:unread" "Unread on the mailing list" ?m))

    ;; Needed with mbsync, apparently
    (setq mu4e-change-filenames-when-moving t)
    (setq mu4e-html2text-command 'mu4e-shr2text)


    ))
		#+END_SRC


** Web Browsing
#+BEGIN_SRC emacs-lisp
(use-package w3m-load
  :when (and (executable-find "w3m") (file-exists-p
                                      "/usr/share/emacs/site-lisp/w3m"))
  :load-path "/usr/share/emacs/site-lisp/w3m/"
  :ensure nil
  )
#+END_SRC
* Utilities
** Spell Checking
*** Abbrev
#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :ensure nil
  :defer t
  :custom
  (abbrev-file-name abbrev-location)
  (abbrev-mode t)
  :config
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file))
  )
#+END_SRC
*** Flyspell
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :defer 1
  :custom
  (flyspell-abbrev-p t)
  (flyspell-issue-message-flag nil)
  (flyspell-issue-welcome-flag nil)
  (flyspell-mode 1)
  :config
  (use-package helm-flyspell
    :bind (("C-c ;" . helm-flyspell-correct))))
#+END_SRC
** Google Translate
	 #+BEGIN_SRC emacs-lisp
(use-package google-translate
  :config
  (use-package google-translate-smooth-ui
    :ensure nil
    :bind (("C-c t" . 'google-translate-smooth-translate))
    :config
    (setq google-translate-translation-directions-alist
	  '(("sv" . "en") ("en" . "sv")))))
	 #+END_SRC
** Lastpass
	 #+BEGIN_SRC emacs-lisp
(defun lp-login (login-name)
  "Testing"
  (interactive "sLastpass account: ")
  (shell-command (concat "lpass login " login-name)))
(defun lp-ls
    (&optional args output-buffer error-buffer)
  "Derp"
  (interactive "s(Optional) Group name:
	 s(Optional) Output buffer: ")
  (if (string= output-buffer "")
      (shell-command (concat "lpass ls " args))
    (shell-command (concat "lpass ls " args) output-buffer error-buffer)))

(defun lp-show (name &optional output-buffer error-buffer)
  "darp"
  (interactive "sName: ")
  (if (string= output-buffer "") (shell-command (concat "lpass show" name))(shell-command (concat "lpass show " name) output-buffer error-buffer)))

(defun lp-insert-show (name)
  "dlarp"
  (interactive "sName: ") (lp-show name t))
(defun lp-insert-ls (&optional args)
  "Derp"
  (interactive "s(Optional) Group name:") (lp-ls args t))
(defun lp-get-password (name &optional output-buffer error-buffer)
  (interactive "sName: ")
  (lp-show (concat name "| grep password | grep -v sudo | cut -d\" \" -f2 ") output-buffer error-buffer))

(defun lp-insert-password (name)
  (interactive "sName: ")
  (lp-get-password name t))
	 #+END_SRC
** Presentations
	 #+BEGIN_SRC emacs-lisp
(use-package demo-it
	:config)

(use-package
	ox-reveal
	:after org
	:config
	(use-package htmlize))
;(demo-it-create (demo-it-presentation "./configuration.org"))

;(demo-it-start)
	 #+END_SRC

* Experimental
** Emacs Lisp

	 #+BEGIN_SRC emacs-lisp
;(semantic-mode -1)
(use-package org-notes
	:when (file-exists-p "~/ownCloud/projects/elisp/")
	:disabled t
	:load-path "~/ownCloud/projects/elisp/"
	:ensure nil
	:commands (org-notes-mode
						 toggle-org-latex-export-on-save
						 org-notes-cpp-help
						 org-notes-latex-help
						 org-notes-math-help))
(use-package meson-ide
	:when (file-exists-p (expand-file-name "~/meson-ide"))
	:after org-mode
	:disabled t
	:load-path "~/meson-ide"
	:ensure nil
	:defer 3
	:preface
	(defun compile-meson-ide ()
		(when nil (let ((default-directory "~/.emacs.d/org-notes-mode/meson-ide/"))
							(org-babel-tangle-file "meson-ide.org"))))
	(compile-meson-ide)
	:config
	(meson-ide-setup))

(use-package ert
	:commands (ert-deftest ert)
	)
	 #+END_SRC
* To be integrated
There is only darkness here. Flee.
	#+BEGIN_SRC emacs-lisp
(use-package nameless
  :after (lisp-mode org-mode)
  :hook ((emacs-lisp-mode org-mode) . nameless-mode))

(use-package xah-replace-pairs
	:commands xah-replace-pairs-region
	:preface
	(defvar multireplace-list nil "Nah.")
	(defvar multireplace-pair-first nil "nah.")
	(defvar multireplace-pair-second nil "nah.")
	(defun multireplace (first second)
		(interactive "r")
		(while (yes-or-no-p "More pairs?")
			(print "1")
			(setq multireplace-pair-first (read-from-minibuffer "First:"))
			(print multireplace-pair-first)
			(setq multireplace-pair-second (read-from-minibuffer "Second:"))
			(print multireplace-pair-second)
			(setq multireplace-list (cons (list multireplace-pair-first multireplace-pair-second) multireplace-list))
			(setq multireplace-pair-first nil multireplace-pair-second nil))
		(xah-replace-pairs-region first second multireplace-list)
		(setq multireplace-list nil multireplace-pair-first nil
					multireplace-pair-second nil))
	:defer t)


(use-package multiple-cursors
  :bind (("C-M-." . mc/mark-next-like-this))
  )

(use-package spaceline
  :defer 5
  :commands (spaceline-spacemacs-theme
	     spaceline-helm-mode spaceline-info-mode)
  :config
  (use-package spaceline-config
    :ensure nil
    :config
    (spaceline-spacemacs-theme)
    (spaceline-helm-mode t)
    (spaceline-info-mode t)
    (use-package all-the-icons
      :config
      (use-package spaceline-all-the-icons
	:config
	(spaceline-all-the-icons-theme)))))
	#+END_SRC
	#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
(defun eshell-here ()
		"Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
		(interactive)
		(let* ((parent (if (buffer-file-name)
											 (file-name-directory (buffer-file-name))
										 default-directory))
					 (height (/ (window-total-height) 3))
					 (name   (car (last (split-string parent "/" t))))
					 (_eshell-name (concat "*eshell: " name "*"))
					 (already-existing (get-buffer _eshell-name)))
			(split-window-vertically (- height))
			(other-window 1)
			(if already-existing
					(switch-to-buffer _eshell-name)
					(eshell "new")
					(rename-buffer _eshell-name))
			(insert (concat "ls"))
			(eshell-send-input)))
(defun scratch-here (&optional region-begin region-end)
	"Opens a new scratch-buffer associated with the current buffer to the side of
the current buffer.

If region is active, or REGION-BEGIN and REGION-END are set, insert content of
region into scratch buffer. If associated scratch buffer already exists, open it
and insert region contents at top."
	(interactive (if (use-region-p)
									 (list (region-beginning) (region-end))
								 (list nil nil)))
	(let* ((curr-buffer-name (buffer-name (current-buffer)))
				 (scratch-buffer-name (concat "*scratch " curr-buffer-name "*"))
				 (scratch-buffer (get-buffer-create scratch-buffer-name))
				 (region-string (if (and region-begin region-end)
														(buffer-substring-no-properties region-begin
																														region-end) nil))
				 (scratch-window-open (get-buffer-window scratch-buffer)))
		(if scratch-window-open
				(select-window scratch-window-open)
			(split-window-horizontally)
			(other-window 1)
			(switch-to-buffer scratch-buffer))
		(emacs-lisp-mode)
		(when region-string (insert region-string)))
	(goto-char (point-min)))

(bind-key "<f7>" 'scratch-here)
(use-package "eshell"
	:ensure nil
	:commands (eshell-here eshell eshell-send-input)
	:init
	(bind-key "<f9>" 'eshell-here)
	:config
	(use-package "em-smart"
		:ensure nil
		:config
		(setq eshell-where-to-jump 'begin)
		(setq eshell-review-quick-commands nil)
		(setq eshell-smart-space-goes-to-end t))
	(defun eshell/x ()
		(insert "exit")
		(eshell-send-input)
		(delete-window))
	)

(use-package expand-region
	:defer t
	:config
	(global-set-key (kbd "C-=") 'er/expand-region)
	)
	#+END_SRC
	#+BEGIN_SRC emacs-lisp
(defun xah-change-bracket-pairs ( *fromType *toType *begin *end)
  "Change bracket pairs from one type to another on current line or selection.
					For example, change all parenthesis () to square brackets [].

					When called in lisp program, *begin *end are region begin/end position, *fromType or *toType is a string of a bracket pair. \u2056 \"()\",  \"[]\", etc.
					URL `http://ergoemacs.org/emacs/elisp_change_brackets.html'
					Version 2016-11-04"
  (interactive
   (let ((-bracketsList
	  '("() paren"
	    "{} braces" "[] square"
	    "<> greater"
	    "\u201c\u201d curly quote"
	    "\u2018\u2019 single"
	    "\u2039\u203a french"
	    "«» double french"
	    "\u300c\u300d corner"
	    "\u300e\u300f double corner"
	    "\u3010\u3011 LENTICULAR"
	    "\u3016\u3017 white LENTICULAR"
	    "\u300a\u300b double angle"
	    "\u3008\u3009 angle "
	    "\u3014\u3015 TORTOISE"
	    "\u2985\u2986 white paren"
	    "\u301a\u301b white square"
	    "\u2983\u2984 white braces"
	    "\u2329\u232a"
	    "\u2991\u2992"
	    "\u29fc\u29fd"
	    "\u27e6\u27e7 math square"
	    "\u27e8\u27e9 math angle"
	    "\u27ea\u27eb"
	    "\u27ee\u27ef"
	    "\u27ec\u27ed"
	    "\u275b\u275c"
	    "\u275d\u275e"
	    "\u2768\u2769"
	    "\u276a\u276b"
	    "\u2774\u2775"
	    "\u276c\u276d"
	    "\u276e\u276f"
	    "\u2770\u2771"
	    "   none"
	    )))
     (list
      (helm-comp-read "Replace this:" -bracketsList )
      (helm-comp-read "To:" -bracketsList )
      (if (use-region-p) (region-beginning) nil)
      (if (use-region-p) (region-end) nil))))
  (save-excursion
    (save-restriction
      (when (null *begin)
	(setq *begin (line-beginning-position))
	(setq *end (line-end-position)))
      (narrow-to-region *begin *end)
      (let ( (case-fold-search nil)
	     (-fromLeft (substring *fromType 0 1))
	     (-toLeft (if (string-equal (substring *toType 0 1) " ")
			  (progn "")
			(substring *toType 0 1)))
	     (-fromRight (substring *fromType 1 2))
	     (-toRight (if (string-equal (substring *toType 1 2) " ")
			   (progn "")
			 (substring *toType 1 2))))
	(progn
	  (goto-char (point-min))
	  (while (search-forward -fromLeft nil t)
	    (overlay-put (make-overlay (match-beginning 0) (match-end 0)) 'face 'highlight)
	    (replace-match -toLeft 'FIXEDCASE 'LITERAL)))
	(progn
	  (goto-char (point-min))
	  (while (search-forward -fromRight nil t)
	    (overlay-put (make-overlay (match-beginning 0) (match-end 0)) 'face 'highlight)
	    (replace-match -toRight 'FIXEDCASE 'LITERAL)))))))

(use-package server
  :commands (server-running-p server-start)
  :config
  (unless (server-running-p)
    (server-start)
    ))
;; (unless (get-buffer "*Standalone Eshell*")
;;   (save-window-excursion
;;     (eshell)
;;     (rename-buffer "*Standalone Eshell*")))
;; (defun goto-standalone-eshell ()
;;   (interactive)
;;   (switch-to-buffer "*Standalone Eshell*"))
(use-package macrostep
	:after lisp-mode
	)
(use-package spacemacs-common
	:ensure spacemacs-theme
	:config (load-theme 'spacemacs-dark t))
;; (use-package spacemacs-theme
;; :ensure t
;; :defer nil
;; )
;;  (load-theme 'spacemacs-dark t)
	#+END_SRC

** ESUP
	 #+BEGIN_SRC emacs-lisp
(use-package f
	:defer t
	)
(use-package esup
	:after f
	:preface
	)
(defun esup-without-byte-compiler ()
	(interactive)
	(let ((esupfile (make-temp-file "esup")))
		(save-window-excursion
			(find-file (expand-file-name esupfile))
			(insert "(require 'package)
	(setq package-enable-at-startup nil)
	(add-to-list 'package-archives
							 '(\"melpa\" . \"http://melpa.org/packages/\") t)
	(add-to-list 'package-archives
							 '(\"org\" . \"http://orgmode.org/elpa/\") t)
	(require 'use-package)
	(unless (package-installed-p 'use-package)
		(package-refresh-contents)
		(package-install 'use-package))
	;(eval-when-compile (require 'use-package))
	(setq use-package-debug nil)
																				;(setq use-package-verbose 'debug)
	(setq use-package-verbose nil)

	(setq use-package-always-ensure t)\n")
			(insert-file-contents "~/.emacs.d/configuration.el")
			(save-buffer)
			(esup (expand-file-name esupfile))
			)))
(defvar generate-init-file-name
	"configuration-debug.el")
(defun generate-init-file ()
	(interactive)
	(org-babel-tangle-file "~/.emacs.d/configuration.org")
	(save-window-excursion
		(let ((to-delete (find-file generate-init-file-name)))
			(erase-buffer)
			(goto-char (point-max))
			(insert-file-contents "~/.emacs.d/configuration.el")
			(goto-char (point-max))
		 (insert "\n")
		 (save-buffer)
		 )))

	 #+END_SRC
** Disabled Stuff
*** Hyperbole
#+BEGIN_SRC emacs-lisp
(use-package hyperbole
  :disabled t
  :defer 2)
#+END_SRC
*** Writegood/room

	 #+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  :disabled t
  :config)
(use-package writeroom-mode
  :disabled t)
	 #+END_SRC
*** Evil
	 #+BEGIN_SRC emacs-lisp
(use-package evil
	:disabled t
	:config
	(evil-mode -1)
	(use-package org-evil)
	)
	 #+END_SRC
*** EXWM
#+BEGIN_SRC emacs-lisp
(use-package exwm
  :disabled t
  :config
  (use-package exwm-config
    :ensure nil)
                                        ;(exwm-config-default)
  (use-package exwm-systemtray
    :commands exwm-systemtray-enable
    :ensure nil
    :config
    (exwm-systemtray-enable)))
;; (require 'exwm)
;; (require 'exwm-config)
;; (define-key exwm-mode-map (kbd "C-c C-j") 'exwm-input-grab-keyboard)
;; (exwm-enable)
;; (message "ted")
#+END_SRC
*** Cask-mode
#+BEGIN_SRC emacs-lisp
(use-package cask-mode
  :disabled t
  :defer t)
#+END_SRC
*** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :bind (("C-s" . swiper)
	 ("C-r" . swiper))
  :disabled t
  :config
  (use-package swiper-helm))
#+END_SRC
*** Window Purpose
#+BEGIN_SRC emacs-lisp
(use-package window-purpose
  :disabled t
  :init
  (use-package helm-purpose
    :after helm
    :config
    (purpose-mode)
    (helm-purpose-setup)
    (setq purpose-preferred-prompt 'helm)))
#+END_SRC
*** Language Tool
	 #+BEGIN_SRC emacs-lisp
(defun locate-langtool ()
  (or (executable-find "languagetool")
      (executable-find "langtool")))
(use-package langtool
  :disabled t
  :when (locate-langtool)
  :config
  (setq langtool-bin (locate-langtool))
  (setq langtool-language-tool-jar (locate-langtool))
  (setq langtool-default-language "en-GB"))
;(langtool-check-buffer)
	 #+END_SRC

*** Wanderlust
#+BEGIN_SRC emacs-lisp
(use-package wl
  :ensure wanderlust
  :disabled t
  :config
  (if (boundp 'mail-user-agent)
      (setq mail-user-agent 'wl-user-agent))
  (if (fboundp 'define-mail-user-agent)
      (define-mail-user-agent
        'wl-user-agent
        'wl-user-agent-compose
        'wl-draft-send
        'wl-draft-kill
        'mail-send-hook)))
#+END_SRC

*** Notmuch
#+BEGIN_SRC emacs-lisp
(use-package notmuch
  :disabled t
  :bind (;;("<f12>" . notmuch)
         :map notmuch-message-mode-map
         ("C-c C-w" . my-mu4e-choose-signature))
  :config
  ;;A few commonly used saved searches.
  (setq notmuch-saved-searches
        (quote
         ((:name "inbox" :query "tag:inbox AND -tag:work" :key "i" :sort-order oldest-first)
          (:name "flagged" :query "tag:flagged" :key "f") ;flagged messages
          (:name "sent" :query "tag:sent -tag:work" :key "t" :sort-order newest-first)
          (:name "drafts" :query "tag:draft" :key "d")
          (:name "mailinglist" :query "tag:lists/mailinglistID" :key "c")
          (:name "all mail" :query "*" :key "a" :sort-order
                 newest-first)))))
#+END_SRC
*** Treemacs
Treemacs creates a really powerful file-browser that can be
created with F1. By default, the treemacs-buffer wont be
selected by C-x o. It can be selected with M-0.

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :disabled t
  :defer t
  :config
  (setq treemacs-follow-after-init t
	treemacs-width 35
	treemacs-indentation 2
	treemacs-git-integration t
	treemacs-collapse-dirs (if (executable-find "python") 3 0)
	treemacs-silent-refresh t
	treemacs-change-root-without-asking t
	treemacs-is-never-other-window t)
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (use-package treemacs-projectile
    :defer t
    :config
    (setq treemacs-header-function  #'treemacs-projectile-create-header))
  :bind
  (:map global-map
	([f1] . treemacs-toggle)
	("M-0" . treemacs-select-window)
	("C-c 1" . treemacs-delete-other-windows)))
	#+END_SRC

*** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :disabled t
  :defer 1
  :init (powerline-vim-theme))
#+END_SRC
*** Clean Aindent Mode
Not sure if this is necessary with aggressive-indent.
#+BEGIN_SRC emacs-lisp
(use-package clean-aindent-mode
  :disabled t
  :hook prog-mode)
#+END_SRC


*** YCMD
		 #+BEGIN_SRC emacs-lisp
(use-package ycmd
  :when (file-exists-p "/home/einarelen/src/ycmd/ycmd/")
  :disabled t
  :diminish ycmd-mode
  :after cc-mode
  :hook (c-mode-common . ycmd-mode)
  :config
  (set-variable 'ycmd-server-command
		'("python" "/home/einarelen/src/ycmd/ycmd/"))
  (use-package company-ycmd
    :after (company cc-mode)
    :config
    (company-ycmd-setup)))
		 #+END_SRC

*** Function Args
		 #+BEGIN_SRC emacs-lisp
(use-package function-args
	:disabled t
	:diminish function-args-mode
	:defer 2
	:config
	(fa-config-default))
		 #+END_SRC

*** pp-c-l
#+BEGIN_SRC emacs-lisp
(use-package pp-c-l
  :disabled t
  :commands pretty-control-l-mode
  :hook (prog-mode . pretty-control-l-mode)
  :config
  (bind-key "C-x C-e" #'pp-eval-last-sexp))
#+END_SRC
*** Eldoc
		#+BEGIN_SRC emacs-lisp
(defun turn-off-eldoc ()
	"Temporarily turn off eldoc-mode."
	(eldoc-mode -1))
;; (use-package "eldoc"
;;   :diminish eldoc-mode
;;   :defer 2
;;   :init
;;   (progn (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode) (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode) (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)))

		#+END_SRC
